{
    "docs": [
        {
            "location": "/", 
            "text": "PyMapManager is a suite of Python tools to visualize, annotate, and analyze time-series image volumes. PyMapManager opens annotations created with the Igor Pro version of \nMap Manager\n, allowing additional visualization and analysis to easily be performed.\n\n\nThere are three components to PyMapManager:\n\n\n\n\nA Python package\n\n\nA web server\n\n\nA desktop application.\n\n\n\n\n1) PyMapManager Python package\n\n\nInstall with\n\n\npip install PyMapManager\n\n\n\nTo get started writing Python code to extend Map Manager analysis, see the iPython notebooks in the \n/examples\n folder. For more detailed install instructions, see \nInstall PyMapManager\n. See the \nAPI Documentation\n for a full description of all the classes and functions.\n\n\n2) PyMapManager server\n\n\nThe PyMapManager server provides a web-based front-end to browse Map Manager annotations and images. The PyMapManager server also provides a \nREST API\n to retrieve Map Manager annotations and images from within your favorite programming environment.\n\n\nWe have an \nexample server\n to see this in action. Please note, this server is at an early development stage and might not always be available. \n\n\nBrowsing annotations\n\n\n\n\nBrowsing annotations in time series stacks\n\n\n\n\n\n\n3) PyMapManager deskop application\n\n\nDevelopment of this desktop application has been downgraded to focus on the PyMapManager web interface.\n\n\nThe Qt version of PyMapManager is a desktop application. See \n/PyQtMapManager\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#1-pymapmanager-python-package", 
            "text": "Install with  pip install PyMapManager  To get started writing Python code to extend Map Manager analysis, see the iPython notebooks in the  /examples  folder. For more detailed install instructions, see  Install PyMapManager . See the  API Documentation  for a full description of all the classes and functions.", 
            "title": "1) PyMapManager Python package"
        }, 
        {
            "location": "/#2-pymapmanager-server", 
            "text": "The PyMapManager server provides a web-based front-end to browse Map Manager annotations and images. The PyMapManager server also provides a  REST API  to retrieve Map Manager annotations and images from within your favorite programming environment.  We have an  example server  to see this in action. Please note, this server is at an early development stage and might not always be available.", 
            "title": "2) PyMapManager server"
        }, 
        {
            "location": "/#browsing-annotations", 
            "text": "", 
            "title": "Browsing annotations"
        }, 
        {
            "location": "/#browsing-annotations-in-time-series-stacks", 
            "text": "", 
            "title": "Browsing annotations in time series stacks"
        }, 
        {
            "location": "/#3-pymapmanager-deskop-application", 
            "text": "Development of this desktop application has been downgraded to focus on the PyMapManager web interface.  The Qt version of PyMapManager is a desktop application. See  /PyQtMapManager .", 
            "title": "3) PyMapManager deskop application"
        }, 
        {
            "location": "/web-help/", 
            "text": "Plotting annotations\n\n\n\n\n\n\nTime-series and Load time-series.\n Select and then load a timeseries. Once a timeseries is loaded, all other plot interface elements will update the plot in real time.\n\n\n X and Y.\n Select X and Y values to plot.\n\n\nX time-point and Y time-point.\n Select X and Y timepoints to limit the plot to those timepoints. You must either select 'All' for both X and Y or select an individual timepoint for X and Y.\n\n\nMap segment.\n Select a segment to plot or select 'All' segment.\n\n\n\n\nClicking on an annotation in the plot will highlight other corresponding annotations and propagate this selection to the images (see below).\n\n\nBrowsing images\n\n\n\n\n\n\nScroll Images.\n Mouse wheel.\n\n\nPan.\n Click and drag.\n\n\nZoom.\n Control + mouse wheel.\n\n\nBrowsing corresponding annotation.\n Selecting an annotation with single-click will zoom into that annotation and snap all other images to the same annotation. As you hover the mouse, it is ready for selection when cursor turns from a hand (for dragging) to a finger-pointing (to select).\n\n\n\n\n\n\n\n\n\n\nCog Icon.\n To control image options including hiding and showing the tracing and timepoint numbers and additional image controls for scrolling slices and panning.\n\n\nLink checkbox.\n links the images such that paging slices, panning, and zooming will affect all images. Really useful for browsing.\n\n\nSliding Z.\n Make each image a small maximal z-projection to give a more volumetric view.\n\n\nBrightnesz slider.\n  Make the images brighter and darker.\n\n\nChannel popup.\n Select the color channel to display. If no images appear, that channel is not available for the loaded map.\n\n\n\n\nDownloading time-series\n\n\nTime-series can be downloaded for further analysis and browsing in Map Manager Igor, Python, or Matlab.\n\n\nTwo types of downloads are available. Just the annotations, ~1 MB per time-series, is sufficient for most further analysis, or the annotations and the images (big files).", 
            "title": "Web Help"
        }, 
        {
            "location": "/web-help/#plotting-annotations", 
            "text": "Time-series and Load time-series.  Select and then load a timeseries. Once a timeseries is loaded, all other plot interface elements will update the plot in real time.   X and Y.  Select X and Y values to plot.  X time-point and Y time-point.  Select X and Y timepoints to limit the plot to those timepoints. You must either select 'All' for both X and Y or select an individual timepoint for X and Y.  Map segment.  Select a segment to plot or select 'All' segment.   Clicking on an annotation in the plot will highlight other corresponding annotations and propagate this selection to the images (see below).", 
            "title": "Plotting annotations"
        }, 
        {
            "location": "/web-help/#browsing-images", 
            "text": "Scroll Images.  Mouse wheel.  Pan.  Click and drag.  Zoom.  Control + mouse wheel.  Browsing corresponding annotation.  Selecting an annotation with single-click will zoom into that annotation and snap all other images to the same annotation. As you hover the mouse, it is ready for selection when cursor turns from a hand (for dragging) to a finger-pointing (to select).      Cog Icon.  To control image options including hiding and showing the tracing and timepoint numbers and additional image controls for scrolling slices and panning.  Link checkbox.  links the images such that paging slices, panning, and zooming will affect all images. Really useful for browsing.  Sliding Z.  Make each image a small maximal z-projection to give a more volumetric view.  Brightnesz slider.   Make the images brighter and darker.  Channel popup.  Select the color channel to display. If no images appear, that channel is not available for the loaded map.", 
            "title": "Browsing images"
        }, 
        {
            "location": "/web-help/#downloading-time-series", 
            "text": "Time-series can be downloaded for further analysis and browsing in Map Manager Igor, Python, or Matlab.  Two types of downloads are available. Just the annotations, ~1 MB per time-series, is sufficient for most further analysis, or the annotations and the images (big files).", 
            "title": "Downloading time-series"
        }, 
        {
            "location": "/install-pymapmanager/", 
            "text": "Install from \nPyPi\n\n\npip install PyMapManager\n\n\n\nInstall from a manual download\n\n\n1) Download the repo\n\n\ngit clone --depth=1 https://github.com/cudmore/PyMapManager.git\n\n\n\n2) Install PyMapManager (from the downloaded folder)\n\n\ncd PyMapManager\npython setup.py install\n\n\n\nTesting the install from a \npython\n prompt\n\n\nLoad an example map\n\n\nfrom pymapmanager import mmMap\npath = 'PyMapManager/examples/exampleMaps/rr30a'\nmyMap = mmMap(path)\n\n\n\n\nYou should see (exact seconds will vary)\n\n\nmap rr30a loaded in 0.45 seconds.\n\n\n\n\nThen type\n\n\nprint myMap\n\n\n\n\nAnd you should see\n\n\nmap:rr30a map segments:5 stacks:9 total object:2467\n\n\n\n\nWe have tons more examples\n\n\nHead over to the \nexamples/\n folder in the main Github repository.\n\n\nRunning Jupyter notebooks\n\n\nAt this point, it is super simple to run all the example Jupyter notebooks interactively. Back at a command prompt, not in Python, enter the following commands to open a web page with interactive examples.\n\n\npip install jupyter\ncd PyMapManager/examples\njupyter notebook", 
            "title": "Install PyMapManager"
        }, 
        {
            "location": "/install-pymapmanager/#install-from-pypi", 
            "text": "pip install PyMapManager", 
            "title": "Install from PyPi"
        }, 
        {
            "location": "/install-pymapmanager/#install-from-a-manual-download", 
            "text": "", 
            "title": "Install from a manual download"
        }, 
        {
            "location": "/install-pymapmanager/#1-download-the-repo", 
            "text": "git clone --depth=1 https://github.com/cudmore/PyMapManager.git", 
            "title": "1) Download the repo"
        }, 
        {
            "location": "/install-pymapmanager/#2-install-pymapmanager-from-the-downloaded-folder", 
            "text": "cd PyMapManager\npython setup.py install", 
            "title": "2) Install PyMapManager (from the downloaded folder)"
        }, 
        {
            "location": "/install-pymapmanager/#testing-the-install-from-a-python-prompt", 
            "text": "Load an example map  from pymapmanager import mmMap\npath = 'PyMapManager/examples/exampleMaps/rr30a'\nmyMap = mmMap(path)  You should see (exact seconds will vary)  map rr30a loaded in 0.45 seconds.  Then type  print myMap  And you should see  map:rr30a map segments:5 stacks:9 total object:2467", 
            "title": "Testing the install from a python prompt"
        }, 
        {
            "location": "/install-pymapmanager/#we-have-tons-more-examples", 
            "text": "Head over to the  examples/  folder in the main Github repository.", 
            "title": "We have tons more examples"
        }, 
        {
            "location": "/install-pymapmanager/#running-jupyter-notebooks", 
            "text": "At this point, it is super simple to run all the example Jupyter notebooks interactively. Back at a command prompt, not in Python, enter the following commands to open a web page with interactive examples.  pip install jupyter\ncd PyMapManager/examples\njupyter notebook", 
            "title": "Running Jupyter notebooks"
        }, 
        {
            "location": "/install-server/", 
            "text": "Web based browsing\n\n\nThe PyMapManager server allows Map Manager annotations and time-series images to be browsed with a web interface. It is really easy to run the server on your local machine. For a production level server we provide a Docker container.\n\n\nFor instant satisfaction, we have an \nexperimental server\n you can use right now.\n\n\nBrowsing annotations\n\n\n\n\nBrowsing images\n\n\n\n\n\n\nDownload\n\n\nTo run the server locally, you need some data! Example data can be downloaded from the PyMapManager-Data repository. The first thing to do is to clone both the \nPyMapManager\n and the \nPyMapManager-Data\n repositories.\n\n\ngit clone  --depth=1 https://github.com/cudmore/PyMapManager.git\ngit clone  --depth=1 https://github.com/mapmanager/PyMapManager-Data.git\n\n\n\nRunning the server.\n\n\n1) Using Python\n\n\nSimplest case is to use \npython mmserver.py\n and you should be up in no time.\n\n\n# install pymapmanager\npip install PyMapManager/\n# install required server libraries\npip install -r PyMapManager/mmserver/requirements.txt\n\n# run the server\ncd PyMapManager/mserver\npython mmserver.py\n\n\n\nPoint your browser to \nhttp://localhost:5000\n and have fun browsing.\n\n\n2) Using the Docker container\n\n\nRunning the server from within a Docker container has lots of benefits. First off, the Docker container spins up a proper \nnginx\n web server and runs multiple copies of the python code in mmserver.py. With this system, the server is really responsive even when multiple requests are coming in fast as happens when images are scrolled.\n\n\nTo get started, download and install \nDocker Community Edition (CE)\n.\n\n\n2.1) Using docker-compose\n\n\nIf you want to run the server inside a \nDocker\n container, the easiest option is to use \ndocker-compose\n. Using this technique makes a very efficient production level server and is exactly what we are using at \nhttp://cudmore.duckdns.org\n.\n\n\nBuild\n\n\ncd PyMapManager\ndocker-compose build # this will take a few minutes the first time it is run\n\n\n\nRun\n\n\ndocker-compose up\n\n\n\nPoint your browser to \nhttp://localhost\n and have fun browsing.\n\n\nStop\n\n\ndocker-compose down\n\n# stop all docker containers\ndocker stop $(docker ps -aq)\n\n\n\n2.2) Using docker\n\n\nIf you prefer to run the docker services separately and specify paths on the command line.\n\n\nBuild\n\n\ncd PyMapManager\ndocker build -t myimage . # the dot is important\n\n\n\nRedis\n\n\ndocker run -d --name redis -p 6379:6379 redis\n\n\n\nNginx server\n\n\nIn the following docker command, \n/Users/cudmore/Dropbox/PyMapManager-Data\n has to be changed to point to the full path of your local copy of \nPyMapManager-Data\n.\n\n\ncd PyMapManager\ndocker run --name mycontainer -p 80:80 -v /Users/cudmore/Dropbox/PyMapManager-Data:/PyMapManager-Data --link redis myimage\n\n\n\nPoint your browser to \nhttp://localhost\n and have fun browsing.\n\n\nStop\n\n\ndocker stop mycontainer\ndocker rm mycontainer\n\ndocker stop redis\ndocker rm redis", 
            "title": "Install Server"
        }, 
        {
            "location": "/install-server/#web-based-browsing", 
            "text": "The PyMapManager server allows Map Manager annotations and time-series images to be browsed with a web interface. It is really easy to run the server on your local machine. For a production level server we provide a Docker container.  For instant satisfaction, we have an  experimental server  you can use right now.", 
            "title": "Web based browsing"
        }, 
        {
            "location": "/install-server/#browsing-annotations", 
            "text": "", 
            "title": "Browsing annotations"
        }, 
        {
            "location": "/install-server/#browsing-images", 
            "text": "", 
            "title": "Browsing images"
        }, 
        {
            "location": "/install-server/#download", 
            "text": "To run the server locally, you need some data! Example data can be downloaded from the PyMapManager-Data repository. The first thing to do is to clone both the  PyMapManager  and the  PyMapManager-Data  repositories.  git clone  --depth=1 https://github.com/cudmore/PyMapManager.git\ngit clone  --depth=1 https://github.com/mapmanager/PyMapManager-Data.git", 
            "title": "Download"
        }, 
        {
            "location": "/install-server/#running-the-server", 
            "text": "", 
            "title": "Running the server."
        }, 
        {
            "location": "/install-server/#1-using-python", 
            "text": "Simplest case is to use  python mmserver.py  and you should be up in no time.  # install pymapmanager\npip install PyMapManager/\n# install required server libraries\npip install -r PyMapManager/mmserver/requirements.txt\n\n# run the server\ncd PyMapManager/mserver\npython mmserver.py  Point your browser to  http://localhost:5000  and have fun browsing.", 
            "title": "1) Using Python"
        }, 
        {
            "location": "/install-server/#2-using-the-docker-container", 
            "text": "Running the server from within a Docker container has lots of benefits. First off, the Docker container spins up a proper  nginx  web server and runs multiple copies of the python code in mmserver.py. With this system, the server is really responsive even when multiple requests are coming in fast as happens when images are scrolled.  To get started, download and install  Docker Community Edition (CE) .", 
            "title": "2) Using the Docker container"
        }, 
        {
            "location": "/install-server/#21-using-docker-compose", 
            "text": "If you want to run the server inside a  Docker  container, the easiest option is to use  docker-compose . Using this technique makes a very efficient production level server and is exactly what we are using at  http://cudmore.duckdns.org .", 
            "title": "2.1) Using docker-compose"
        }, 
        {
            "location": "/install-server/#build", 
            "text": "cd PyMapManager\ndocker-compose build # this will take a few minutes the first time it is run", 
            "title": "Build"
        }, 
        {
            "location": "/install-server/#run", 
            "text": "docker-compose up  Point your browser to  http://localhost  and have fun browsing.", 
            "title": "Run"
        }, 
        {
            "location": "/install-server/#stop", 
            "text": "docker-compose down\n\n# stop all docker containers\ndocker stop $(docker ps -aq)", 
            "title": "Stop"
        }, 
        {
            "location": "/install-server/#22-using-docker", 
            "text": "If you prefer to run the docker services separately and specify paths on the command line.", 
            "title": "2.2) Using docker"
        }, 
        {
            "location": "/install-server/#build_1", 
            "text": "cd PyMapManager\ndocker build -t myimage . # the dot is important", 
            "title": "Build"
        }, 
        {
            "location": "/install-server/#redis", 
            "text": "docker run -d --name redis -p 6379:6379 redis", 
            "title": "Redis"
        }, 
        {
            "location": "/install-server/#nginx-server", 
            "text": "In the following docker command,  /Users/cudmore/Dropbox/PyMapManager-Data  has to be changed to point to the full path of your local copy of  PyMapManager-Data .  cd PyMapManager\ndocker run --name mycontainer -p 80:80 -v /Users/cudmore/Dropbox/PyMapManager-Data:/PyMapManager-Data --link redis myimage  Point your browser to  http://localhost  and have fun browsing.", 
            "title": "Nginx server"
        }, 
        {
            "location": "/install-server/#stop_1", 
            "text": "docker stop mycontainer\ndocker rm mycontainer\n\ndocker stop redis\ndocker rm redis", 
            "title": "Stop"
        }, 
        {
            "location": "/rest-api/", 
            "text": "Using the REST API in a program\n\n\nIn addition to the browser interface, the PyMapManager server provides a REST interface allowing Map Manager data to be retrieved from almost any programming environment.\n\n\nIn Python using the PyMapManager package\n\n\nfrom pymapmanager import mmMap\nurlmap = 'rr30a'\nm = mmMap(urlmap=urlmap)\n\n\n\n\nWhat we just did was very powerful. We just loaded a map from an internet REST server!\n\n\nIn pure Python\n\n\nimport json\nimport urllib2\n\nurl='http://127.0.0.1:5000/api/v1/getmaptracing/public/rr30a?mapsegment=\nsession=3\nxstat=x\nystat=y\nzstat=z'\n\nmytracing = json.load(urllib2.urlopen(\nurl\n))\n\n# plot with matplotlib\nimport matplotlib.pyplot as plt\nplt.plot(mytracing['x'],mytracing['y'])\n\n\n\n\nIn Matlab\n\n\nurl='http://127.0.0.1:5000/api/v1/getmaximage/public/rr30a/0/2'\nmyimage = webread(url);\nimshow(myimage)\n\n\n\n\nIn Igor\n\n\nprint fetchurl(\nhttp://127.0.0.1:5000/api/v1/maplist/public\n)\n\n\n\n\nREST API\n\n\nThe following REST routes specify end-points that will return JSON text or images. \n\n\nWe will be using the \npublic\n user and the \nrr30a\n map included in the \nmmserver/data/\n folder.\n\n\nThe links on this page point to a development server that may or may not be running.\n\n\nGet help\n\n\nhttp://127.0.0.1:5000/help\n\n\nGet a list of maps\n\n\nhttp://127.0.0.1:5000/api/v1/maplist/public\n\n\nLoad a map\n\n\napi/v1/loadmap/public/rr30a\n\n\nGet annotation values\n\n\nHere we will get an x-stat \ndays\n, a y-stat \npDist\n, and a z-stat \nz\n for map segment 0 across all sessions\n\n\nhttp://127.0.0.1:5000/v2/public/rr30a/getmapvalues?mapsegment=0\nsession=\nxstat=days\nystat=pDist\nzstat=z\n\n\nGet a tracing\n\n\nHere we will get the x/y/z of a tracing (in um) for all map segments in session 3\n\n\nhttp://127.0.0.1:5000/v2/public/rr30a/getmaptracing?mapsegment=\nsession=3\nxstat=x\nystat=y\nzstat=z\n\n\nGet an image\n\n\nHere we will get the 20th image in the stack for timepoint 3, channel 2\n\n\nhttp://127.0.0.1:5000/getimage/public/rr30a/3/2/20\n\n\nGet a maximal intensity projection\n\n\nHere we will get the maximal intensity projection of timepoint 0, channel 2\n\n\nhttp://127.0.0.1:5000/getmaximage/public/rr30a/0/2", 
            "title": "REST API"
        }, 
        {
            "location": "/rest-api/#using-the-rest-api-in-a-program", 
            "text": "In addition to the browser interface, the PyMapManager server provides a REST interface allowing Map Manager data to be retrieved from almost any programming environment.", 
            "title": "Using the REST API in a program"
        }, 
        {
            "location": "/rest-api/#in-python-using-the-pymapmanager-package", 
            "text": "from pymapmanager import mmMap\nurlmap = 'rr30a'\nm = mmMap(urlmap=urlmap)  What we just did was very powerful. We just loaded a map from an internet REST server!", 
            "title": "In Python using the PyMapManager package"
        }, 
        {
            "location": "/rest-api/#in-pure-python", 
            "text": "import json\nimport urllib2\n\nurl='http://127.0.0.1:5000/api/v1/getmaptracing/public/rr30a?mapsegment= session=3 xstat=x ystat=y zstat=z'\n\nmytracing = json.load(urllib2.urlopen( url ))\n\n# plot with matplotlib\nimport matplotlib.pyplot as plt\nplt.plot(mytracing['x'],mytracing['y'])", 
            "title": "In pure Python"
        }, 
        {
            "location": "/rest-api/#in-matlab", 
            "text": "url='http://127.0.0.1:5000/api/v1/getmaximage/public/rr30a/0/2'\nmyimage = webread(url);\nimshow(myimage)", 
            "title": "In Matlab"
        }, 
        {
            "location": "/rest-api/#in-igor", 
            "text": "print fetchurl( http://127.0.0.1:5000/api/v1/maplist/public )", 
            "title": "In Igor"
        }, 
        {
            "location": "/rest-api/#rest-api", 
            "text": "The following REST routes specify end-points that will return JSON text or images.   We will be using the  public  user and the  rr30a  map included in the  mmserver/data/  folder.  The links on this page point to a development server that may or may not be running.", 
            "title": "REST API"
        }, 
        {
            "location": "/rest-api/#get-help", 
            "text": "http://127.0.0.1:5000/help", 
            "title": "Get help"
        }, 
        {
            "location": "/rest-api/#get-a-list-of-maps", 
            "text": "http://127.0.0.1:5000/api/v1/maplist/public", 
            "title": "Get a list of maps"
        }, 
        {
            "location": "/rest-api/#load-a-map", 
            "text": "api/v1/loadmap/public/rr30a", 
            "title": "Load a map"
        }, 
        {
            "location": "/rest-api/#get-annotation-values", 
            "text": "Here we will get an x-stat  days , a y-stat  pDist , and a z-stat  z  for map segment 0 across all sessions  http://127.0.0.1:5000/v2/public/rr30a/getmapvalues?mapsegment=0 session= xstat=days ystat=pDist zstat=z", 
            "title": "Get annotation values"
        }, 
        {
            "location": "/rest-api/#get-a-tracing", 
            "text": "Here we will get the x/y/z of a tracing (in um) for all map segments in session 3  http://127.0.0.1:5000/v2/public/rr30a/getmaptracing?mapsegment= session=3 xstat=x ystat=y zstat=z", 
            "title": "Get a tracing"
        }, 
        {
            "location": "/rest-api/#get-an-image", 
            "text": "Here we will get the 20th image in the stack for timepoint 3, channel 2  http://127.0.0.1:5000/getimage/public/rr30a/3/2/20", 
            "title": "Get an image"
        }, 
        {
            "location": "/rest-api/#get-a-maximal-intensity-projection", 
            "text": "Here we will get the maximal intensity projection of timepoint 0, channel 2  http://127.0.0.1:5000/getmaximage/public/rr30a/0/2", 
            "title": "Get a maximal intensity projection"
        }, 
        {
            "location": "/examples/a-plotting-annotations/", 
            "text": "Map plotting examples\n\n\nWe will load an example map, get annotation values as 2D NumPy arrays, and plot the values using MatplotLib.\nThe plotting can just as easily be done with any Python library such as Plotly or Pandas.\n\n\nImport the packages we will use\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nfrom pymapmanager import mmMap\nfrom pymapmanager.mmUtil import newplotdict\n\n# check the version of pymapmanager\nimport pymapmanager\nprint('pymapmanager version is', pymapmanager.__version__)\n\n# set some matplotlib defaults so our plots look better\nfontsize = 16\nmpl.rcParams['xtick.labelsize'] = fontsize \nmpl.rcParams['ytick.labelsize'] = fontsize \n\n\n\n\npymapmanager version is 0.0.5\n\n\n\nLoad a map\n\n\nfilePath = 'exampleMaps/rr30a/rr30a.txt'\nm = mmMap(filePath=filePath)\n\n\n\n\nmap rr30a loaded in 0.42 seconds.\n\n\n\nPlot the position of each spine along its segment tracing\n\n\n# getMapValues2(self, stat, roiType='spineROI', segmentID=[], plotBad=False)\n\nprint('Number of map segments:', m.numMapSegments)\n\nsegmentID = 3 # None to plot all segment, [1,3,5] to plot segment 1, 3, and 5\n\n# m.getMapValues2() returns a 2D numpy ndarray\n# rows are object runs, columns are sessions, each [i][j] is value for 'stat'\nx = m.getMapValues2('mapSession', segmentID=segmentID)\ny = m.getMapValues2('pDist', segmentID=segmentID)\n\n# plot with matplotlib\nplt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray')\nplt.plot(x, y, 'ok')\nplt.xlabel('Session Index', fontsize=16)\nplt.ylabel('Dendrite Position (um)', fontsize=16)\nplt.show()\n\n\n\n\nNumber of map segments: 5\nmmMap.getMapValues3() took 0.04 seconds\nmmMap.getMapValues3() took 0.02 seconds\n\n\n\n\n\nPlot the 'background subtracted spine sum' from image channel two.\n\n\nsegmentID = None # All segments\nx = m.getMapValues2('days', segmentID=segmentID)\ny = m.getMapValues2('ubssSum_int2', segmentID=segmentID)\n\n# plot with matplotlib\nplt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray')\nplt.plot(x, y, 'ok')\nplt.xlabel('Days', fontsize=16)\nplt.ylabel('Background Subtracted\\nSpine Sum\\n(Channel 2)', fontsize=16)\nplt.show()\n\n\n\n\nmmMap.getMapValues3() took 0.03 seconds\nmmMap.getMapValues3() took 0.02 seconds\n\n\n\n\n\nNormalize to session 1 and replot.\n\n\nmmMap.getMapValues returns 2D numpy arrays where earch row is a run of objects and columns are sessions. We can normalize each annotation at [i][j] to itself at session 1 with [i][session]\n\n\nsegmentID = None # All segments\nx = m.getMapValues2('days', segmentID=segmentID)\ny = m.getMapValues2('ubssSum_int2', segmentID=segmentID)\n\nsessionOne = y[:,[1]]\nyPercent = y / sessionOne * 100\n\n# plot with matplotlib\nplt.plot(x.T, yPercent.T, '-k', linewidth=1.0, color='gray')\nplt.plot(x, yPercent, 'ok')\nplt.xlabel('Days', fontsize=16)\nplt.ylabel('Percent Change In\\nBackground Subtracted Spine Sum\\n(Channel 2)', fontsize=16)\nplt.show()\n\n\n\n\nmmMap.getMapValues3() took 0.03 seconds\nmmMap.getMapValues3() took 0.03 seconds\n\n\n\n\n\nCompare a stat on two different sessions\n\n\nHere we compare the values at session 4 with the values at session 2.\n\n\nsession4 = y[:,[4]] # pull annotations from sessions 4\nsession2 = y[:,[2]] # pull annotaitons from session 2\n\n# plot with matplotlib\nplt.plot(session2, session4, 'ok')\nplt.xlabel('Session 2', fontsize=16)\nplt.ylabel('Session 4', fontsize=16)\nplt.show()\n\n\n\n\n\n\nNormalize one session against another\n\n\nAnd then normalize the values at session 4 with the values at session 2.\n\n\nsession4 = y[:,[4]]\nsession2 = y[:,[2]]\n\nsession4Norm = session4 / session2 * 100\n\n# plot with matplotlib\nplt.plot(session2, session4Norm, 'ok')\nplt.xlabel('Session 2', fontsize=16)\nplt.ylabel('Session 4 (% change from session 2)', fontsize=16)\nplt.show()\n\n\n\n\n\n\nPlot length of added spines normalized to the 'birth day'.\n\n\nThe color in the plot corresponds to the intensity of a spine as a function of its 'birth' day, e.g. the day it was added..\n\n\nHere we will use mmMap.getMapValues3() which takes a plot struct. Making it easier to specify paremeters to the plot.\n\n\nThis example is plotting session, it would make more sense to plot 'days'.\n\n\nplotDict = newplotdict()\nplotDict['plotbad'] = True\nplotDict['xstat'] = 'days'\nplotDict['ystat'] = 'pDist'\nplotDict['zstat'] = 'ubssSum_int2' #'sLen3d_int1' #swap in any stat you like, e.g. 'ubssSum_int2'\nplotDict['segmentid'] = [0]\nplotDict = m.getMapValues3(plotDict)\n\nplotDict2 = dict(plotDict)\nplotDict2['xstat'] = 'isAdd'\nplotDict2['ystat'] = 'isSub'\nplotDict2['zstat'] = 'isTransient'\nplotDict2 = m.getMapValues3(plotDict2)\n\n\n#only plot added spines\nx = m.getMapValues2('days', segmentID=plotDict['segmentid']) # get an array of values\nnew_z2 = []\n\nfor i, row in enumerate(plotDict['z']):\n    #if np.count_nonzero(~np.isnan(row)) \n 0:\n    for j, val in enumerate(row):\n        if plotDict2['x'][i,j] == 1: # gives us the session a spine was added\n            #row = row / row[j] * 100 # z-color as '% change' from session spine was added\n            row = row - row[j] # z-color as 'absolute change' from session spine was added\n            new_z2.append(row)\n            break\n\nplt.imshow(new_z2, aspect='auto')\nplt.xlabel('Sessions a spine was added', fontsize=16)\nplt.ylabel('Spine Index (au)', fontsize=16)\nplt.show()\n\n\n\n\nmmMap.getMapValues3() took 0.03 seconds\nmmMap.getMapValues3() took 0.03 seconds\nmmMap.getMapValues3() took 0.03 seconds\n\n\n\n\n\nHomework\n\n\n\n\nPlot ubssSum_int2 vs pDist, sort along pDist, calculate auto-correlation function at lag 1. Peaks in auto-correlation indicate 'hot spots' along dendritic segment. Do this for all segments in a map.\n\n\nPlot a heat map of spine run vs session where color is ubssSum_ch2\n\n\nplot ubssSum as a function of a spines age. X-axis should be days where day 0 is appearance of new spine. This plot will only have added spines\n\n\nDo the same for spine 'death' where x-axis counts down to day 0 when a spine is subtracted", 
            "title": "a-plotting-annotations"
        }, 
        {
            "location": "/examples/a-plotting-annotations/#map-plotting-examples", 
            "text": "We will load an example map, get annotation values as 2D NumPy arrays, and plot the values using MatplotLib.\nThe plotting can just as easily be done with any Python library such as Plotly or Pandas.", 
            "title": "Map plotting examples"
        }, 
        {
            "location": "/examples/a-plotting-annotations/#import-the-packages-we-will-use", 
            "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nfrom pymapmanager import mmMap\nfrom pymapmanager.mmUtil import newplotdict\n\n# check the version of pymapmanager\nimport pymapmanager\nprint('pymapmanager version is', pymapmanager.__version__)\n\n# set some matplotlib defaults so our plots look better\nfontsize = 16\nmpl.rcParams['xtick.labelsize'] = fontsize \nmpl.rcParams['ytick.labelsize'] = fontsize   pymapmanager version is 0.0.5", 
            "title": "Import the packages we will use"
        }, 
        {
            "location": "/examples/a-plotting-annotations/#load-a-map", 
            "text": "filePath = 'exampleMaps/rr30a/rr30a.txt'\nm = mmMap(filePath=filePath)  map rr30a loaded in 0.42 seconds.", 
            "title": "Load a map"
        }, 
        {
            "location": "/examples/a-plotting-annotations/#plot-the-position-of-each-spine-along-its-segment-tracing", 
            "text": "# getMapValues2(self, stat, roiType='spineROI', segmentID=[], plotBad=False)\n\nprint('Number of map segments:', m.numMapSegments)\n\nsegmentID = 3 # None to plot all segment, [1,3,5] to plot segment 1, 3, and 5\n\n# m.getMapValues2() returns a 2D numpy ndarray\n# rows are object runs, columns are sessions, each [i][j] is value for 'stat'\nx = m.getMapValues2('mapSession', segmentID=segmentID)\ny = m.getMapValues2('pDist', segmentID=segmentID)\n\n# plot with matplotlib\nplt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray')\nplt.plot(x, y, 'ok')\nplt.xlabel('Session Index', fontsize=16)\nplt.ylabel('Dendrite Position (um)', fontsize=16)\nplt.show()  Number of map segments: 5\nmmMap.getMapValues3() took 0.04 seconds\nmmMap.getMapValues3() took 0.02 seconds", 
            "title": "Plot the position of each spine along its segment tracing"
        }, 
        {
            "location": "/examples/a-plotting-annotations/#plot-the-background-subtracted-spine-sum-from-image-channel-two", 
            "text": "segmentID = None # All segments\nx = m.getMapValues2('days', segmentID=segmentID)\ny = m.getMapValues2('ubssSum_int2', segmentID=segmentID)\n\n# plot with matplotlib\nplt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray')\nplt.plot(x, y, 'ok')\nplt.xlabel('Days', fontsize=16)\nplt.ylabel('Background Subtracted\\nSpine Sum\\n(Channel 2)', fontsize=16)\nplt.show()  mmMap.getMapValues3() took 0.03 seconds\nmmMap.getMapValues3() took 0.02 seconds", 
            "title": "Plot the 'background subtracted spine sum' from image channel two."
        }, 
        {
            "location": "/examples/a-plotting-annotations/#normalize-to-session-1-and-replot", 
            "text": "mmMap.getMapValues returns 2D numpy arrays where earch row is a run of objects and columns are sessions. We can normalize each annotation at [i][j] to itself at session 1 with [i][session]  segmentID = None # All segments\nx = m.getMapValues2('days', segmentID=segmentID)\ny = m.getMapValues2('ubssSum_int2', segmentID=segmentID)\n\nsessionOne = y[:,[1]]\nyPercent = y / sessionOne * 100\n\n# plot with matplotlib\nplt.plot(x.T, yPercent.T, '-k', linewidth=1.0, color='gray')\nplt.plot(x, yPercent, 'ok')\nplt.xlabel('Days', fontsize=16)\nplt.ylabel('Percent Change In\\nBackground Subtracted Spine Sum\\n(Channel 2)', fontsize=16)\nplt.show()  mmMap.getMapValues3() took 0.03 seconds\nmmMap.getMapValues3() took 0.03 seconds", 
            "title": "Normalize to session 1 and replot."
        }, 
        {
            "location": "/examples/a-plotting-annotations/#compare-a-stat-on-two-different-sessions", 
            "text": "Here we compare the values at session 4 with the values at session 2.  session4 = y[:,[4]] # pull annotations from sessions 4\nsession2 = y[:,[2]] # pull annotaitons from session 2\n\n# plot with matplotlib\nplt.plot(session2, session4, 'ok')\nplt.xlabel('Session 2', fontsize=16)\nplt.ylabel('Session 4', fontsize=16)\nplt.show()", 
            "title": "Compare a stat on two different sessions"
        }, 
        {
            "location": "/examples/a-plotting-annotations/#normalize-one-session-against-another", 
            "text": "And then normalize the values at session 4 with the values at session 2.  session4 = y[:,[4]]\nsession2 = y[:,[2]]\n\nsession4Norm = session4 / session2 * 100\n\n# plot with matplotlib\nplt.plot(session2, session4Norm, 'ok')\nplt.xlabel('Session 2', fontsize=16)\nplt.ylabel('Session 4 (% change from session 2)', fontsize=16)\nplt.show()", 
            "title": "Normalize one session against another"
        }, 
        {
            "location": "/examples/a-plotting-annotations/#plot-length-of-added-spines-normalized-to-the-birth-day", 
            "text": "The color in the plot corresponds to the intensity of a spine as a function of its 'birth' day, e.g. the day it was added..  Here we will use mmMap.getMapValues3() which takes a plot struct. Making it easier to specify paremeters to the plot.  This example is plotting session, it would make more sense to plot 'days'.  plotDict = newplotdict()\nplotDict['plotbad'] = True\nplotDict['xstat'] = 'days'\nplotDict['ystat'] = 'pDist'\nplotDict['zstat'] = 'ubssSum_int2' #'sLen3d_int1' #swap in any stat you like, e.g. 'ubssSum_int2'\nplotDict['segmentid'] = [0]\nplotDict = m.getMapValues3(plotDict)\n\nplotDict2 = dict(plotDict)\nplotDict2['xstat'] = 'isAdd'\nplotDict2['ystat'] = 'isSub'\nplotDict2['zstat'] = 'isTransient'\nplotDict2 = m.getMapValues3(plotDict2)\n\n\n#only plot added spines\nx = m.getMapValues2('days', segmentID=plotDict['segmentid']) # get an array of values\nnew_z2 = []\n\nfor i, row in enumerate(plotDict['z']):\n    #if np.count_nonzero(~np.isnan(row))   0:\n    for j, val in enumerate(row):\n        if plotDict2['x'][i,j] == 1: # gives us the session a spine was added\n            #row = row / row[j] * 100 # z-color as '% change' from session spine was added\n            row = row - row[j] # z-color as 'absolute change' from session spine was added\n            new_z2.append(row)\n            break\n\nplt.imshow(new_z2, aspect='auto')\nplt.xlabel('Sessions a spine was added', fontsize=16)\nplt.ylabel('Spine Index (au)', fontsize=16)\nplt.show()  mmMap.getMapValues3() took 0.03 seconds\nmmMap.getMapValues3() took 0.03 seconds\nmmMap.getMapValues3() took 0.03 seconds", 
            "title": "Plot length of added spines normalized to the 'birth day'."
        }, 
        {
            "location": "/examples/a-plotting-annotations/#homework", 
            "text": "Plot ubssSum_int2 vs pDist, sort along pDist, calculate auto-correlation function at lag 1. Peaks in auto-correlation indicate 'hot spots' along dendritic segment. Do this for all segments in a map.  Plot a heat map of spine run vs session where color is ubssSum_ch2  plot ubssSum as a function of a spines age. X-axis should be days where day 0 is appearance of new spine. This plot will only have added spines  Do the same for spine 'death' where x-axis counts down to day 0 when a spine is subtracted", 
            "title": "Homework"
        }, 
        {
            "location": "/dev-notes/", 
            "text": "Roadmap\n\n\nToDo\n\n\n\n\n\n\nShould be very possible to make a docker to install debian+nginx+uwsgi+flask+pymapmanager\n\n\nhttps://hub.docker.com/r/tiangolo/uwsgi-nginx-flask/\n\n\n\n\n\n\nRe-organize mmserver/mmclient into one folder. Have flask server templaes/index.html from \npython mmserver.py\n. Have nginx server templates/index.thml as native html/javascript (no flask)\n\n\n\n\n\n\nAdd a configure.html to visually configure server\n\n\n\n\nfor a \nusername\n show list of maps in \ndata/\n\n\nhave \nupload annotations button\n ask for a hdd folder and upload via rest.\n\n\nwill probably not work because web interface is not allowed to operate outside its root directory\n\n\nmaybe add a local \ndrop\n folder to make this possible? User drops a map folder in here (it is inside mmserver/)\n\n\n\n\n\n\n\n\n\n\n\n\nGet simple login working. I don't understand how Flask session and multiple instances in uwsgi/gunicorn works?\n\n\n\n\n\n\nBig picture\n\n\n\n\nHave web interface load a map pool and plot based on time-point conditions across a number of maps. Goal here is to reproduce figures in a paper.\n\n\nUpload annotations (and eventually images) from within Igor\n\n\nEnable editing and saving of maps via web interface.\n\n\nMake a docker to easily install and run PyMapManager client/server on a local machine (MacOS, Linux, Windows).\n\n\n\n\nGeneral\n\n\n\n\n\n\nposting a map from Igor\n\n\n\n\nmmio will allow mmio.postmap() from folder\n\n\nmake mmio also post map from zip\n\n\nhave igor call an igor script (not part of class library)\n\n\ngiven a folder path, zip the map and post it\n\n\n\n\n\n\n\n\n\n\n\n\nthen unzip and place files in correct spot\n\n\n\n\nadd class GlobalMaps() to mmserver.\n\n\nSet and get maps from either a global dict (when run as python mmserver.py) or a redis database when run insode uWSGI\n\n\n\n\n\n\n\n\nFront end javascript\n\n\n\n\nIntercept keyboard in leaflet, use this to switch (channel 1, channel 2, channel 3)\n\n\nGroup all plotly and then leaflet variables into a dict like mp. and ml. for my plotly and my leaflet.\n\n\n\n\nSnap to missing tp data using pivot points. Have rest 'mapinfo' return list of pivot points (from original file) and then javascript interface to set pivot point in javascript\n\n\n\n\n\n\nFigure out a way to preload or cache already loaded images. Should be some sort of fast hash table but to start, have a dict of {'rr30a_tp_slice': image-data}\n\n\n\n\nSet/get cookies in client browser. To do this, place ALL plotly options and then leaflet options into a dict. Save all values in each dict as cookies.\n\n\nmarker size\n\n\nleaflet marker size\n\n\nset name for session in session list from (None, original file, session condition)\n\n\ndefault channel\n\n\n\n\n\n\n\n\nFront end REST\n\n\n\n\nUse redis to share data between workers in gunicorn/uWSGI\n\n\nnormalize naming conventions\n\n\nall calls start with /api/\n\n\n\n\n\n\nAdd username/password.\n\n\nMove /data outside of /mmserver/data, outside of github repo in general\n\n\nUse tifffile to read .tif files. We currently read .png with scipy (remove scipy dependency).\n\n\n\n\nClient/server runnning on Linux\n\n\n\n\nMake sure we can do proper web server.\n\n\nnginx\n\n\njavascript client: nginx redirect http://mapmanager.net/mmclient to /users/cudmore/mmclient\n\n\nflask rest server: nginx redirect http://mapmanager.net/api to mmserver .socket\n\n\nmake sure mmserver.js parses web url, strip /mmclient and append /api/ for rest calls\n\n\nredis-server, to allow mmserver.py to run in gunicorn/uWSGI with multiple workers (threads). How often should I clear the database? Maybe load all maps on server start?\n\n\n\n\n\n\n\n\nBack end python package PyMapManager\n\n\n\n\nWrite code to pool spine intensity across maps based on session condition (done in Igor and Matlab). Add interface to javascript. This will be used to reproduce a figure from a paper. It should be easy, simple, and work really well.\n\n\nFinalize system to detect 'no segments'\n\n\nMake a test run of editing map. As user is working, save work in browser, on 'save' button, push to server and save to file (not redis).\n\n\n\n\nIgor\n\n\n\n\nWrite Igor code to export a vascular map\n\n\nstack db will have 2x type (nodeROI, slabROI)\n\n\nobject map will hold just nodeROI (they are linked through time)\n\n\non click in in plotly/leaflet, don't plotRun() is slabROI (there is no map for slabs\n\n\n\n\n\n\n\n\nChange log\n\n\n\n\n\n\n20180301\n\n\n\n\nWe now have a docker to install the client/server with zero configuration\n\n\n\n\n\n\n\n\n20180106\n\n\n\n\nWe now open 'otherROI' files\n\n\nCan now set marker size in leaflet maps\n\n\nleflet maps report user click, tp and spine\n\n\n\n\n\n\n\n\n[done] Generate API documentation from doc strings\n\n\n\n\n[done] Load individual slices dynamically (how to query number of slices in .tif file?)\n\n\n[done] Use the mmserver REST API to make a standalone web-app using Flask, Angular, and Plotly\n\n\n[done] Implement visualization of a spine run in mmserver.\n\n\nMake mmserver link all plot, clicking in one will highlight in other.\n\n\nmmserver needs to use \nmap pool\n so publication data can easily be presented.\n\n\n\n\nRunning development servers\n\n\ncd mmserver\npython mmserver.py\n\ncd mmclient\nreload -b\n\n\n\nSphinx\n\n\nThis is to auto generated API documentation from embedded docstrings in the python code using Sphinx. The output is available on readthedocs.\n\n\n1) Don't foget to add modules that depend on C code to \nMOCK_MODULES\n section of \nconf.py\n.\n\n\n2) Whenever I change modules (like when I removed interface/)\n\n\nlast \n../version.py\n should exclude \npymapmanager/version.py\n from output.\n\n\nNote: I am using pymapmanager/version.py to import a common \nversion\n into PyMapManager/setup.py and inserting \nversion\n into pymapmanager module (via pymapmanager/\ninit\n.py)\n\n\ncd PyMapManager/pymapmanager/docs\nsphinx-apidoc -f -o source ../ ../version.py\n\n\n\nOutput should look like:\n\n\nCreating file source/pymapmanager.rst.\nCreating file source/modules.rst.\n\n\n\n3) Make the docs in /build/\n\n\ncd PyMapManager/pymapmanager/docs\n#sphinx-build -b html source/ build\n#sphinx-build -b html . build\nmake html\n\n\n\n4) Push to Github and then go to ReadTheDocs and click \nbuild\n.\n\n\nThis relies on a webhook made inside the Github repo (forgot exactly how/where).\n\n\nMkDocs\n\n\nThis is for 'human readable' documentation website available at http://blog.cudore.io/PyMapMAnager\n\n\nServe locally\n\n\ncd ~/Dropbox/PyMapManager/docs\nmkdocs serve\n\n\n\n\nPush to github. This needs to be pushed from local github repo, not Dropbox repo.\n\n\ncd ~/Sites/PyMapManager/docs\nmkdocs gh-deploy --clean\n\n\n\n\nSynchronize with Unison\n\n\n# Unison preferences file\nroot = /Users/cudmore/Dropbox/PyMapManager/\nroot = /Users/cudmore/Sites/PyMapManager\n\nignore = Name .DS_Store\nignore = Name *.DS_Store\nignore = Name *.pyc\nignore = Name *.tif\nignore = Name *.egg-info\nignore = Path .git\nignore = Path .idea\n\n#when synchronizing between platforms or hdd formats\n#rsrc = false\n#perms = 0\n\n# Be fast even on Windows\n#fastcheck = yes\n\n#servercmd=/home1/robertcu/unison\n\n\n\n\nExport iPython notebooks to html\n\n\njupyter nbconvert --ExecutePreprocessor.kernel_name=python3 --to html --execute --ExecutePreprocessor.timeout=120\n\njupyter nbconvert --ExecutePreprocessor.kernel_name=python2 --to html --execute --ExecutePreprocessor.timeout=120\n\n\n\n\nSearch and replace across a number of files\n\n\nsearch for \nwindows\n and replace with \nlinux\n\n\ngrep -rl 'windows' ./ | xargs sed -i 's/windows/linux/g'\n\ngrep -rl 'windows' ./ | xargs sed -i \"\" 's/windows/linux/g'\n\nfind ./ -type f -exec sed -i \"\" \"s/oldstring/new string/g\" {} \\;\n\n\n\nsearch all files in current directory \n./\n for \n and replace with ``\n\n\ngrep -rl '    ' ./ | xargs sed -i \"\" 's/    //g'\n\n\n\nfrom /PyMapMAnager/docs, search for '    ' and replace it with ''\n\n\ngrep -rl '    ' ./docs/examples | xargs sed -i \"\" 's/    //g'\n\n\n\nPushing changes to home Debian server\n\n\n\n\nUse Unison to update entire PyMapManager folder (pymapmanager, mmclient, mmserver)\n\n\n\n\nThis lives in \n/home/cudmore/PyMapManager\n\n\n\n\nIf I changed core soure code, make sure \npymapmanager\n is updated\n\n\n\n\ncd\npip uninstall PyMapManager\npip install -e PyMapManager\n\n\n\n\n\n\nCopy mmclient into /var/www/html\n\n\n\n\ncd\ncd PyMapManager\nsudo cp -fr mmclient /var/www/html/\n\n\n\n\n\n\nRun mmserver/ in screen using gunicorn\n\n\n\n\nMake sure it is not already running with \nscreen -r\n. Or with \nps -aux | grep gunicorn\n\n\ncd\ncd PyMapManager/mmserver\nscreen\ngunicorn -b 0.0.0.0:5010 mmserver:app\n\n\n\n\nPushing changes in mmclient/ to robertcudmore.org\n\n\nNo need for this any more !\n\n\nPushing to \nPyPi\n\n\nVersion 0.0.1 is working with \npip install PyMapManager\n!\n\n\nThis will be available at \nhttps://pypi.python.org/pypi/pymapmanager\n and can be installed with \npip install PyMapManager\n.\n\n\nThere is also a test server at \nhttps://testpypi.python.org/pypi\n\n\n\n\nMake sure there is a \n~/.pypirc\n file\n\n\n\n\n[distutils]\nindex-servers =\n  pypi\n  pypitest\n\n[pypi]\nusername=your_username\npassword=your_password\n\n[pypitest]\nusername=your_username\npassword=your_password\n\n\n\n\n\n\n\n\nUpdate version in \nPyMapManager/setup.py\n\n\nversion='0.0.1',\n\n\n\n\n\n\nMakes .tar.gz in \ndist/\n\n\ncd PyMapManager\npython setup.py sdist\n\n\n\n\n\n\n4.1 push to test server\n\n\npython setup.py sdist upload -r pypitest\n\n\n\n4.2. Push to PyPi website\n\n\npython setup.py sdist upload\n\n\n\nimages\n\n\nI need to decide between\n\n\nmmServer.py is using\n\n\nfrom skimage.io import imsave, imread\n\n\n\nmmMap is using\n\n\nimport scipy.misc\n\n\n\ncookies\n\n\nsee: https://stackoverflow.com/questions/14573223/set-cookie-and-get-cookie-with-javascript\n\n\nredis flask server\n\n\nWe need to use a global database when running production server where mmserver is spawned into multiple processes and can not share \nglobal\n python objects. Redis requires a bit of work to package objects into json serializable objects so for now just use pickle to do the heaver lifting. Map rr30 is ~24 MB when pickled, rough estimate is we get ~44 picked maps per 1 GB of memory (in practice we will get a bit more).\n\n\ninstall redis-server\n\n\n# osx\nbrew install redis\n# linux\nsudo apt-get install redis\n\n\n\nMake redis-server run at system boot\n\n\nosx\n   To have launchd start redis now and restart at login:\n     brew services start redis\n   Or, if you don't want/need a background service you can just run:\n    redis-server /usr/local/etc/redis.conf\n\n# linux\nfigure this out\n\n\n\n\nRun redis server manually\n\n\nredis-server\n\n\n\nCheck redis-server is running\n\n\nredis-cli ping\n\n\n\nTo clear all data from server\n\n\nredis-cli FLUSHALL\n\n\n\nrun in development mode (on osx)\n\n\ncd\ncd PyMapManager/mmserver\nsudo gunicorn -w 4 -b 127.0.0.1:5010 mmserver:app\n\n\n\n#!/bin/python\n\n'''\n# for code to put/get from redis server\n# see: http://calderonroberto.com/blog/flask-and-redis-is-fun/\n\n# Dependencies:\n# pip install flask\n# pip install redis\n#\n# Then run server with `redis-server`, default address is 127.0.0.1:6379\n# Re-running the server still has old data\n# To clear, use redis-cli (while server is running)\n# redis-cli FLUSHALL\n\n## Install redis-server\n\nThis should install as a running service, check that it is still running on reboot\n\n### On OSX\n\n    brew install redis-server\n\n### On debian\n\n    sudo apt-get install redis-server\n\n## Clear the whole redis server (all its databases)\n\n    redis-cli FLUSHALL\n\n## can't add python class objects to redis, use pickle\n\nhttps://stackoverflow.com/questions/15219858/how-to-store-a-complex-object-in-redis-using-redis-py\n\n'''\n\nfrom flask import Flask\nfrom flask import request\nimport flask\nimport redis\nimport time\nimport json\nfrom flask import Response, stream_with_context\n\n# see: https://stackoverflow.com/questions/15219858/how-to-store-a-complex-object-in-redis-using-redis-py\nimport pickle\n\nfrom pymapmanager.mmMap import mmMap\n\napp = Flask(__name__)\napp.debug = True\ndb = redis.Redis('localhost') #connect to server\n\nttl = 31104000 #one year\n\n@app.route('/set/\nthemap\n')\ndef one(themap):\n    print 'themap:', themap\n    mappath = '/Users/cudmore/Dropbox/PyMapManager/mmserver/data/public/' + themap + '/' + themap + '.txt'\n    m = mmMap(mappath)\n    pickled_object = pickle.dumps(m)\n    db.set(themap, pickled_object) # themap is a string key '' here\n    #db.delete(themap)\n    #db.hmset(themap, {'a':1})\n    return 'ok'\n\n@app.route('/get/\nthemap\n')\ndef two(themap):\n    if not db.exists(themap):\n        return \nError: redis map doesn't exist\n\n\n    mapObject = pickle.loads(db.get(themap))\n    print 'mapObject:', mapObject\n\n    #event = db.hgetall(themap)\n    #print 'event:', event\n    #return json.dumps(event)\n    return json.dumps(str(mapObject))\n\nif __name__ == \n__main__\n:\n    app.run()\n\n\n\n\nDebian\n\n\nRedis\n\n\n/etc/init.d/redis-server stop\n\n\n\nnginx\n\n\nsudo service nginx stop", 
            "title": "Development Notes"
        }, 
        {
            "location": "/dev-notes/#roadmap", 
            "text": "", 
            "title": "Roadmap"
        }, 
        {
            "location": "/dev-notes/#todo", 
            "text": "Should be very possible to make a docker to install debian+nginx+uwsgi+flask+pymapmanager  https://hub.docker.com/r/tiangolo/uwsgi-nginx-flask/    Re-organize mmserver/mmclient into one folder. Have flask server templaes/index.html from  python mmserver.py . Have nginx server templates/index.thml as native html/javascript (no flask)    Add a configure.html to visually configure server   for a  username  show list of maps in  data/  have  upload annotations button  ask for a hdd folder and upload via rest.  will probably not work because web interface is not allowed to operate outside its root directory  maybe add a local  drop  folder to make this possible? User drops a map folder in here (it is inside mmserver/)       Get simple login working. I don't understand how Flask session and multiple instances in uwsgi/gunicorn works?", 
            "title": "ToDo"
        }, 
        {
            "location": "/dev-notes/#big-picture", 
            "text": "Have web interface load a map pool and plot based on time-point conditions across a number of maps. Goal here is to reproduce figures in a paper.  Upload annotations (and eventually images) from within Igor  Enable editing and saving of maps via web interface.  Make a docker to easily install and run PyMapManager client/server on a local machine (MacOS, Linux, Windows).", 
            "title": "Big picture"
        }, 
        {
            "location": "/dev-notes/#general", 
            "text": "posting a map from Igor   mmio will allow mmio.postmap() from folder  make mmio also post map from zip  have igor call an igor script (not part of class library)  given a folder path, zip the map and post it       then unzip and place files in correct spot   add class GlobalMaps() to mmserver.  Set and get maps from either a global dict (when run as python mmserver.py) or a redis database when run insode uWSGI", 
            "title": "General"
        }, 
        {
            "location": "/dev-notes/#front-end-javascript", 
            "text": "Intercept keyboard in leaflet, use this to switch (channel 1, channel 2, channel 3)  Group all plotly and then leaflet variables into a dict like mp. and ml. for my plotly and my leaflet.   Snap to missing tp data using pivot points. Have rest 'mapinfo' return list of pivot points (from original file) and then javascript interface to set pivot point in javascript    Figure out a way to preload or cache already loaded images. Should be some sort of fast hash table but to start, have a dict of {'rr30a_tp_slice': image-data}   Set/get cookies in client browser. To do this, place ALL plotly options and then leaflet options into a dict. Save all values in each dict as cookies.  marker size  leaflet marker size  set name for session in session list from (None, original file, session condition)  default channel", 
            "title": "Front end javascript"
        }, 
        {
            "location": "/dev-notes/#front-end-rest", 
            "text": "Use redis to share data between workers in gunicorn/uWSGI  normalize naming conventions  all calls start with /api/    Add username/password.  Move /data outside of /mmserver/data, outside of github repo in general  Use tifffile to read .tif files. We currently read .png with scipy (remove scipy dependency).", 
            "title": "Front end REST"
        }, 
        {
            "location": "/dev-notes/#clientserver-runnning-on-linux", 
            "text": "Make sure we can do proper web server.  nginx  javascript client: nginx redirect http://mapmanager.net/mmclient to /users/cudmore/mmclient  flask rest server: nginx redirect http://mapmanager.net/api to mmserver .socket  make sure mmserver.js parses web url, strip /mmclient and append /api/ for rest calls  redis-server, to allow mmserver.py to run in gunicorn/uWSGI with multiple workers (threads). How often should I clear the database? Maybe load all maps on server start?", 
            "title": "Client/server runnning on Linux"
        }, 
        {
            "location": "/dev-notes/#back-end-python-package-pymapmanager", 
            "text": "Write code to pool spine intensity across maps based on session condition (done in Igor and Matlab). Add interface to javascript. This will be used to reproduce a figure from a paper. It should be easy, simple, and work really well.  Finalize system to detect 'no segments'  Make a test run of editing map. As user is working, save work in browser, on 'save' button, push to server and save to file (not redis).", 
            "title": "Back end python package PyMapManager"
        }, 
        {
            "location": "/dev-notes/#igor", 
            "text": "Write Igor code to export a vascular map  stack db will have 2x type (nodeROI, slabROI)  object map will hold just nodeROI (they are linked through time)  on click in in plotly/leaflet, don't plotRun() is slabROI (there is no map for slabs", 
            "title": "Igor"
        }, 
        {
            "location": "/dev-notes/#change-log", 
            "text": "20180301   We now have a docker to install the client/server with zero configuration     20180106   We now open 'otherROI' files  Can now set marker size in leaflet maps  leflet maps report user click, tp and spine     [done] Generate API documentation from doc strings   [done] Load individual slices dynamically (how to query number of slices in .tif file?)  [done] Use the mmserver REST API to make a standalone web-app using Flask, Angular, and Plotly  [done] Implement visualization of a spine run in mmserver.  Make mmserver link all plot, clicking in one will highlight in other.  mmserver needs to use  map pool  so publication data can easily be presented.", 
            "title": "Change log"
        }, 
        {
            "location": "/dev-notes/#running-development-servers", 
            "text": "cd mmserver\npython mmserver.py\n\ncd mmclient\nreload -b", 
            "title": "Running development servers"
        }, 
        {
            "location": "/dev-notes/#sphinx", 
            "text": "This is to auto generated API documentation from embedded docstrings in the python code using Sphinx. The output is available on readthedocs.  1) Don't foget to add modules that depend on C code to  MOCK_MODULES  section of  conf.py .  2) Whenever I change modules (like when I removed interface/)  last  ../version.py  should exclude  pymapmanager/version.py  from output.  Note: I am using pymapmanager/version.py to import a common  version  into PyMapManager/setup.py and inserting  version  into pymapmanager module (via pymapmanager/ init .py)  cd PyMapManager/pymapmanager/docs\nsphinx-apidoc -f -o source ../ ../version.py  Output should look like:  Creating file source/pymapmanager.rst.\nCreating file source/modules.rst.  3) Make the docs in /build/  cd PyMapManager/pymapmanager/docs\n#sphinx-build -b html source/ build\n#sphinx-build -b html . build\nmake html  4) Push to Github and then go to ReadTheDocs and click  build .  This relies on a webhook made inside the Github repo (forgot exactly how/where).", 
            "title": "Sphinx"
        }, 
        {
            "location": "/dev-notes/#mkdocs", 
            "text": "This is for 'human readable' documentation website available at http://blog.cudore.io/PyMapMAnager  Serve locally  cd ~/Dropbox/PyMapManager/docs\nmkdocs serve  Push to github. This needs to be pushed from local github repo, not Dropbox repo.  cd ~/Sites/PyMapManager/docs\nmkdocs gh-deploy --clean", 
            "title": "MkDocs"
        }, 
        {
            "location": "/dev-notes/#synchronize-with-unison", 
            "text": "# Unison preferences file\nroot = /Users/cudmore/Dropbox/PyMapManager/\nroot = /Users/cudmore/Sites/PyMapManager\n\nignore = Name .DS_Store\nignore = Name *.DS_Store\nignore = Name *.pyc\nignore = Name *.tif\nignore = Name *.egg-info\nignore = Path .git\nignore = Path .idea\n\n#when synchronizing between platforms or hdd formats\n#rsrc = false\n#perms = 0\n\n# Be fast even on Windows\n#fastcheck = yes\n\n#servercmd=/home1/robertcu/unison", 
            "title": "Synchronize with Unison"
        }, 
        {
            "location": "/dev-notes/#export-ipython-notebooks-to-html", 
            "text": "jupyter nbconvert --ExecutePreprocessor.kernel_name=python3 --to html --execute --ExecutePreprocessor.timeout=120\n\njupyter nbconvert --ExecutePreprocessor.kernel_name=python2 --to html --execute --ExecutePreprocessor.timeout=120", 
            "title": "Export iPython notebooks to html"
        }, 
        {
            "location": "/dev-notes/#search-and-replace-across-a-number-of-files", 
            "text": "search for  windows  and replace with  linux  grep -rl 'windows' ./ | xargs sed -i 's/windows/linux/g'\n\ngrep -rl 'windows' ./ | xargs sed -i \"\" 's/windows/linux/g'\n\nfind ./ -type f -exec sed -i \"\" \"s/oldstring/new string/g\" {} \\;  search all files in current directory  ./  for   and replace with ``  grep -rl '    ' ./ | xargs sed -i \"\" 's/    //g'  from /PyMapMAnager/docs, search for '    ' and replace it with ''  grep -rl '    ' ./docs/examples | xargs sed -i \"\" 's/    //g'", 
            "title": "Search and replace across a number of files"
        }, 
        {
            "location": "/dev-notes/#pushing-changes-to-home-debian-server", 
            "text": "Use Unison to update entire PyMapManager folder (pymapmanager, mmclient, mmserver)   This lives in  /home/cudmore/PyMapManager   If I changed core soure code, make sure  pymapmanager  is updated   cd\npip uninstall PyMapManager\npip install -e PyMapManager   Copy mmclient into /var/www/html   cd\ncd PyMapManager\nsudo cp -fr mmclient /var/www/html/   Run mmserver/ in screen using gunicorn   Make sure it is not already running with  screen -r . Or with  ps -aux | grep gunicorn  cd\ncd PyMapManager/mmserver\nscreen\ngunicorn -b 0.0.0.0:5010 mmserver:app", 
            "title": "Pushing changes to home Debian server"
        }, 
        {
            "location": "/dev-notes/#pushing-changes-in-mmclient-to-robertcudmoreorg", 
            "text": "No need for this any more !", 
            "title": "Pushing changes in mmclient/ to robertcudmore.org"
        }, 
        {
            "location": "/dev-notes/#pushing-to-pypi", 
            "text": "Version 0.0.1 is working with  pip install PyMapManager !  This will be available at  https://pypi.python.org/pypi/pymapmanager  and can be installed with  pip install PyMapManager .  There is also a test server at  https://testpypi.python.org/pypi   Make sure there is a  ~/.pypirc  file   [distutils]\nindex-servers =\n  pypi\n  pypitest\n\n[pypi]\nusername=your_username\npassword=your_password\n\n[pypitest]\nusername=your_username\npassword=your_password    Update version in  PyMapManager/setup.py  version='0.0.1',    Makes .tar.gz in  dist/  cd PyMapManager\npython setup.py sdist    4.1 push to test server  python setup.py sdist upload -r pypitest  4.2. Push to PyPi website  python setup.py sdist upload", 
            "title": "Pushing to PyPi"
        }, 
        {
            "location": "/dev-notes/#images", 
            "text": "I need to decide between  mmServer.py is using  from skimage.io import imsave, imread  mmMap is using  import scipy.misc", 
            "title": "images"
        }, 
        {
            "location": "/dev-notes/#cookies", 
            "text": "see: https://stackoverflow.com/questions/14573223/set-cookie-and-get-cookie-with-javascript", 
            "title": "cookies"
        }, 
        {
            "location": "/dev-notes/#redis-flask-server", 
            "text": "We need to use a global database when running production server where mmserver is spawned into multiple processes and can not share  global  python objects. Redis requires a bit of work to package objects into json serializable objects so for now just use pickle to do the heaver lifting. Map rr30 is ~24 MB when pickled, rough estimate is we get ~44 picked maps per 1 GB of memory (in practice we will get a bit more).", 
            "title": "redis flask server"
        }, 
        {
            "location": "/dev-notes/#install-redis-server", 
            "text": "# osx\nbrew install redis\n# linux\nsudo apt-get install redis", 
            "title": "install redis-server"
        }, 
        {
            "location": "/dev-notes/#make-redis-server-run-at-system-boot", 
            "text": "osx\n   To have launchd start redis now and restart at login:\n     brew services start redis\n   Or, if you don't want/need a background service you can just run:\n    redis-server /usr/local/etc/redis.conf\n\n# linux\nfigure this out", 
            "title": "Make redis-server run at system boot"
        }, 
        {
            "location": "/dev-notes/#run-redis-server-manually", 
            "text": "redis-server", 
            "title": "Run redis server manually"
        }, 
        {
            "location": "/dev-notes/#check-redis-server-is-running", 
            "text": "redis-cli ping", 
            "title": "Check redis-server is running"
        }, 
        {
            "location": "/dev-notes/#to-clear-all-data-from-server", 
            "text": "redis-cli FLUSHALL", 
            "title": "To clear all data from server"
        }, 
        {
            "location": "/dev-notes/#run-in-development-mode-on-osx", 
            "text": "cd\ncd PyMapManager/mmserver\nsudo gunicorn -w 4 -b 127.0.0.1:5010 mmserver:app  #!/bin/python\n\n'''\n# for code to put/get from redis server\n# see: http://calderonroberto.com/blog/flask-and-redis-is-fun/\n\n# Dependencies:\n# pip install flask\n# pip install redis\n#\n# Then run server with `redis-server`, default address is 127.0.0.1:6379\n# Re-running the server still has old data\n# To clear, use redis-cli (while server is running)\n# redis-cli FLUSHALL\n\n## Install redis-server\n\nThis should install as a running service, check that it is still running on reboot\n\n### On OSX\n\n    brew install redis-server\n\n### On debian\n\n    sudo apt-get install redis-server\n\n## Clear the whole redis server (all its databases)\n\n    redis-cli FLUSHALL\n\n## can't add python class objects to redis, use pickle\n\nhttps://stackoverflow.com/questions/15219858/how-to-store-a-complex-object-in-redis-using-redis-py\n\n'''\n\nfrom flask import Flask\nfrom flask import request\nimport flask\nimport redis\nimport time\nimport json\nfrom flask import Response, stream_with_context\n\n# see: https://stackoverflow.com/questions/15219858/how-to-store-a-complex-object-in-redis-using-redis-py\nimport pickle\n\nfrom pymapmanager.mmMap import mmMap\n\napp = Flask(__name__)\napp.debug = True\ndb = redis.Redis('localhost') #connect to server\n\nttl = 31104000 #one year\n\n@app.route('/set/ themap ')\ndef one(themap):\n    print 'themap:', themap\n    mappath = '/Users/cudmore/Dropbox/PyMapManager/mmserver/data/public/' + themap + '/' + themap + '.txt'\n    m = mmMap(mappath)\n    pickled_object = pickle.dumps(m)\n    db.set(themap, pickled_object) # themap is a string key '' here\n    #db.delete(themap)\n    #db.hmset(themap, {'a':1})\n    return 'ok'\n\n@app.route('/get/ themap ')\ndef two(themap):\n    if not db.exists(themap):\n        return  Error: redis map doesn't exist \n\n    mapObject = pickle.loads(db.get(themap))\n    print 'mapObject:', mapObject\n\n    #event = db.hgetall(themap)\n    #print 'event:', event\n    #return json.dumps(event)\n    return json.dumps(str(mapObject))\n\nif __name__ ==  __main__ :\n    app.run()", 
            "title": "run in development mode (on osx)"
        }, 
        {
            "location": "/dev-notes/#debian", 
            "text": "", 
            "title": "Debian"
        }, 
        {
            "location": "/dev-notes/#redis", 
            "text": "/etc/init.d/redis-server stop", 
            "title": "Redis"
        }, 
        {
            "location": "/dev-notes/#nginx", 
            "text": "sudo service nginx stop", 
            "title": "nginx"
        }, 
        {
            "location": "/open-source/", 
            "text": "PyMapManager only exists because of the massive amount of creativity, expertise, and effort that has been put in to creating and maintaining a slew of open-source software projects.\n\n\nServer\n\n\n\n\nDebian\n - Operating system\n\n\nNGINX \n - Web server for load balancing, microservices, and API gateways\n\n\nuwsgi\n - Web standard for NGINX to talk to Python\n\n\n\n\nPython\n (back-end)\n\n\n\n\nFlask\n - Web microframework\n\n\nSciPy\n - Scientific computing ecosystem\n\n\nNumPy\n - Scientific computing for Python\n\n\nPandas\n - Data analysis library\n\n\nMatplotlib\n - Plotting\n\n\nTifffile - General purpose Tiff file library\n\n\nRedis\n - Database\n\n\nCelery\n - Distributed task queue\n\n\n\n\nJavascript\n (front-end)\n\n\n\n\nAngular\n - Superheroic Javascript framework\n\n\nJQuery\n\n\nD3\n - Data driven documents\n\n\nLeaflet\n - Interactive maps\n\n\nPlotly\n - Modern visualization for the data era\n\n\nBootstrap\n - Worlds most popular HTML/CSS/JS Toolkit\n\n\n\n\nContainers\n\n\n\n\nDocker\n - Software containers are the future\n\n\n\n\nDocumentation\n\n\n\n\nJekyll\n - Static site generator (Main \nMap Manager\n documentation)\n\n\nmkDocs\n - Static site generator (This Website)\n\n\nSphinx\n - To create documentation (\nPyMapManager API Documentation\n)\n\n\n\n\nDistribution\n\n\n\n\nGithub\n - Software development platform for online storage/sharing/computation\n\n\nPyPi\n - Python package index for online distribution", 
            "title": "Open Source"
        }, 
        {
            "location": "/open-source/#server", 
            "text": "Debian  - Operating system  NGINX   - Web server for load balancing, microservices, and API gateways  uwsgi  - Web standard for NGINX to talk to Python", 
            "title": "Server"
        }, 
        {
            "location": "/open-source/#python-back-end", 
            "text": "Flask  - Web microframework  SciPy  - Scientific computing ecosystem  NumPy  - Scientific computing for Python  Pandas  - Data analysis library  Matplotlib  - Plotting  Tifffile - General purpose Tiff file library  Redis  - Database  Celery  - Distributed task queue", 
            "title": "Python (back-end)"
        }, 
        {
            "location": "/open-source/#javascript-front-end", 
            "text": "Angular  - Superheroic Javascript framework  JQuery  D3  - Data driven documents  Leaflet  - Interactive maps  Plotly  - Modern visualization for the data era  Bootstrap  - Worlds most popular HTML/CSS/JS Toolkit", 
            "title": "Javascript (front-end)"
        }, 
        {
            "location": "/open-source/#containers", 
            "text": "Docker  - Software containers are the future", 
            "title": "Containers"
        }, 
        {
            "location": "/open-source/#documentation", 
            "text": "Jekyll  - Static site generator (Main  Map Manager  documentation)  mkDocs  - Static site generator (This Website)  Sphinx  - To create documentation ( PyMapManager API Documentation )", 
            "title": "Documentation"
        }, 
        {
            "location": "/open-source/#distribution", 
            "text": "Github  - Software development platform for online storage/sharing/computation  PyPi  - Python package index for online distribution", 
            "title": "Distribution"
        }
    ]
}