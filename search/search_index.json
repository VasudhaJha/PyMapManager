{
    "docs": [
        {
            "location": "/", 
            "text": "PyMapManager is a Python package to analyze time-series image stacks.\n\n\nPyMapManager opens annotations created with the Igor Pro version of \nMap Manager\n. Allowing additional analysis to easily be performed.\n\n\nThere are three components to PyMapManager:\n\n\n\n\nPython Package\n\n\nServer\n\n\nDesktop application\n\n\n\n\nPyMapManager Python package\n\n\nSee the \n/examples\n folder in the main GitHub repository for example Python code to easily perform additional analysis. Please also see the \nAPI Documentation\n.\n\n\nPyMapManager server\n\n\nThe PyMapManager server allows web-based browsing of annotations and stacks. See \nserver documentation\n for additional information.\n\n\nBrowsing annotations\n\n\n\n\nBrowsing annotations in time series stacks\n\n\n\n\n\n\nPyMapManager deskop application\n\n\nThe Qt version of PyMapManager is a desktop application. See \ngithub repository\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#pymapmanager-python-package", 
            "text": "See the  /examples  folder in the main GitHub repository for example Python code to easily perform additional analysis. Please also see the  API Documentation .", 
            "title": "PyMapManager Python package"
        }, 
        {
            "location": "/#pymapmanager-server", 
            "text": "The PyMapManager server allows web-based browsing of annotations and stacks. See  server documentation  for additional information.", 
            "title": "PyMapManager server"
        }, 
        {
            "location": "/#browsing-annotations", 
            "text": "", 
            "title": "Browsing annotations"
        }, 
        {
            "location": "/#browsing-annotations-in-time-series-stacks", 
            "text": "", 
            "title": "Browsing annotations in time series stacks"
        }, 
        {
            "location": "/#pymapmanager-deskop-application", 
            "text": "The Qt version of PyMapManager is a desktop application. See  github repository .", 
            "title": "PyMapManager deskop application"
        }, 
        {
            "location": "/install-pymapmanager/", 
            "text": "Install pyMapManager Python package\n\n\nDownload the repo\n\n\ngit clone https://github.com/cudmore/PyMapManager.git\n\n\n\nInstall PyMapManager\n\n\npip install -e PyMapManager\n\n\n\nFrom within Python, include the libraries like:\n\n\nfrom pymapmanager import mmMap", 
            "title": "Install PyMapManager"
        }, 
        {
            "location": "/install-pymapmanager/#install-pymapmanager-python-package", 
            "text": "", 
            "title": "Install pyMapManager Python package"
        }, 
        {
            "location": "/install-pymapmanager/#download-the-repo", 
            "text": "git clone https://github.com/cudmore/PyMapManager.git", 
            "title": "Download the repo"
        }, 
        {
            "location": "/install-pymapmanager/#install-pymapmanager", 
            "text": "pip install -e PyMapManager  From within Python, include the libraries like:  from pymapmanager import mmMap", 
            "title": "Install PyMapManager"
        }, 
        {
            "location": "/install-client-server/", 
            "text": "Running the mmclient/mmserver web servers\n\n\nThe \nmmserver/mmserver.py\n Flask server requires the following libraries\n\n\npip install flask\npip install flask-cors\npip install scikit-image\n\n\n\nStarting the client/server for local use (basic)\n\n\nThis will work well if you are only going to be browsing the client/server from the same machine.\n\n\n1) Start the \nserver/mmserver.py\n rest server\n\n\ncd mmserver\npython mmserver.py\n\n\n\nTest this out by pointing a web browser to\n\n\nhttp://127.0.0.1:5010\n\n\n\nAlternativaly, start the \nmmserver.py\n rest server with\n\n\ncd mmserver\ngunicorn -b 127.0.0.1:5010 mmserver:app\n\n\n\nWrapping the \nmmserver\n to run inside of gunicorn provides a \nsynchronous\n web server. This should handle fast interaction with the web interface much better than the \nasynchronous\n version provided by \npython mmserver.py\n. This is most noticeable when viewing linked sliding z-projections.\n\n\nTo install gunicorn\n\n\npip install gunicorn\n\n\n\n2) start a server to serve index.html and javascript\n\n\nThis is assuming you have node and npm installed. In addition, we are assuming you have used npm to install http-server\n\n\nMake sure \nmmclient/static/mmserver.js\n points to the Rest interface. This file should have\n\n\nserverurl = 'http://127.0.0.1:5010/'\n\n\n\nRun the mmclient\n\n\ncd mmclient\nhttp-server\n\n\n\nThe output should look like this\n\n\nStarting up http-server, serving ./\nAvailable on:\n  http://127.0.0.1:8080\n  http://192.168.1.10:8080\nHit CTRL-C to stop the server\n\n\n\nYou can then browse the client at\n\n\nhttp://127.0.0.1:8080\n\n\n\nThis requires node and npm. It is using http-server from npm.\n\n\nStarting the server for wider use (advanced)\n\n\nThis requires a world-accessible web server to server \nmmclient/index.html\n and for the Flask Rest server in \nmmserver/mmserver.py\n to also be running. For the world-accessible server we have used \nnginx\n with success.\n\n\n\n\nGet a debian system\n\n\n\n\nInstall nginx\n\n\n\n\n\n\nCopy \nmmclient\n into \n/var/www/html/client\n\n\nsudo cp PyMapManager/mmserver/mmclient /var/www/html/\n\n\n\n\n\n\nYou can now access mmclient as http://nginx_server_ip/mmclient\n\n\n\n\nRun the Flask server with\n\n\n\n\ncd mmserver\n   screen\n   gunicorn -b 0.0.0.0:5010 mmserver:app\n   # exit screen with ctrl+a then d \n\n\nThis runs the Flask app \napp\n in the python file \nmmserver.py\n on a world accessible address `http://nginx_server_ip:5010\n\n\nCheck the Rest server manually by browsing to\n\n\nhttp://nginx_server_ip:5010\n\n\n\nMake sure the client in \nmmclient/static/mmserver.js\n is pointing to this rest server\n\n\nsudo pico /var/www/html/mmclient/index.html\n\n\n# make sure the file has\n   serverurl = 'http://nginx_server_ip:5010/'\n\n\nIf that all works, you can browse some maps at\n\n\nhttp://nginx_server_ip/mmclient\n\n\n\nThis will serve the \nmmclient/index.html\n and use the \nstatic/mmserver.js\n file. The .js file will talk to the mmserver REST server via http://nginx_server_ip:5010\n\n\nTo Do\n\n\n1) I can put mmserver.py plus /data/ into /var/www/html/mmserver.\n\n\n2) Then point mmserver.js to http://cudmore.duckdns.org/mmserver\n\n\n3) I need to configure nginx to take http://nginx_server_ip/mmRest and point it to the gunicorn process?\n\n\nStarting the server with \npython mmserver.py\n will run Flask as a single \nasynchronous\n process. Problems will arise when multiple requests are made rapidly and the Flask server is still processing the last request. This mostly happens when using sliding z-projection images. To solve this, Flask needs to be run inside a \nsynchronous\n web server such as gunicorn.\n\n\nIf needed, install gunicorn\n\n\npip install gunicorn\n\n\n\nStart the Flask server inside gunicorn\n\n\n# on osx (requires sudo)\nsudo gunicorn -bind 0.0.0.0:5010 mmserver:app\n\n# on debian\ngunicorn -b 0.0.0.0:5010 mmserver:app\n\n\n\nOn another machine, point a browser to the ip address of the machine running the server\n\n\nhttp://ip:5010\n\n\n\nInstall the Qt desktop app\n\n\nNot done yet", 
            "title": "Install server/client"
        }, 
        {
            "location": "/install-client-server/#running-the-mmclientmmserver-web-servers", 
            "text": "The  mmserver/mmserver.py  Flask server requires the following libraries  pip install flask\npip install flask-cors\npip install scikit-image", 
            "title": "Running the mmclient/mmserver web servers"
        }, 
        {
            "location": "/install-client-server/#starting-the-clientserver-for-local-use-basic", 
            "text": "This will work well if you are only going to be browsing the client/server from the same machine.", 
            "title": "Starting the client/server for local use (basic)"
        }, 
        {
            "location": "/install-client-server/#1-start-the-servermmserverpy-rest-server", 
            "text": "cd mmserver\npython mmserver.py  Test this out by pointing a web browser to  http://127.0.0.1:5010  Alternativaly, start the  mmserver.py  rest server with  cd mmserver\ngunicorn -b 127.0.0.1:5010 mmserver:app  Wrapping the  mmserver  to run inside of gunicorn provides a  synchronous  web server. This should handle fast interaction with the web interface much better than the  asynchronous  version provided by  python mmserver.py . This is most noticeable when viewing linked sliding z-projections.  To install gunicorn  pip install gunicorn", 
            "title": "1) Start the server/mmserver.py rest server"
        }, 
        {
            "location": "/install-client-server/#2-start-a-server-to-serve-indexhtml-and-javascript", 
            "text": "This is assuming you have node and npm installed. In addition, we are assuming you have used npm to install http-server  Make sure  mmclient/static/mmserver.js  points to the Rest interface. This file should have  serverurl = 'http://127.0.0.1:5010/'  Run the mmclient  cd mmclient\nhttp-server  The output should look like this  Starting up http-server, serving ./\nAvailable on:\n  http://127.0.0.1:8080\n  http://192.168.1.10:8080\nHit CTRL-C to stop the server  You can then browse the client at  http://127.0.0.1:8080  This requires node and npm. It is using http-server from npm.", 
            "title": "2) start a server to serve index.html and javascript"
        }, 
        {
            "location": "/install-client-server/#starting-the-server-for-wider-use-advanced", 
            "text": "This requires a world-accessible web server to server  mmclient/index.html  and for the Flask Rest server in  mmserver/mmserver.py  to also be running. For the world-accessible server we have used  nginx  with success.   Get a debian system   Install nginx    Copy  mmclient  into  /var/www/html/client  sudo cp PyMapManager/mmserver/mmclient /var/www/html/    You can now access mmclient as http://nginx_server_ip/mmclient   Run the Flask server with   cd mmserver\n   screen\n   gunicorn -b 0.0.0.0:5010 mmserver:app\n   # exit screen with ctrl+a then d   This runs the Flask app  app  in the python file  mmserver.py  on a world accessible address `http://nginx_server_ip:5010  Check the Rest server manually by browsing to  http://nginx_server_ip:5010  Make sure the client in  mmclient/static/mmserver.js  is pointing to this rest server  sudo pico /var/www/html/mmclient/index.html  # make sure the file has\n   serverurl = 'http://nginx_server_ip:5010/'  If that all works, you can browse some maps at  http://nginx_server_ip/mmclient  This will serve the  mmclient/index.html  and use the  static/mmserver.js  file. The .js file will talk to the mmserver REST server via http://nginx_server_ip:5010", 
            "title": "Starting the server for wider use (advanced)"
        }, 
        {
            "location": "/install-client-server/#to-do", 
            "text": "1) I can put mmserver.py plus /data/ into /var/www/html/mmserver.  2) Then point mmserver.js to http://cudmore.duckdns.org/mmserver  3) I need to configure nginx to take http://nginx_server_ip/mmRest and point it to the gunicorn process?  Starting the server with  python mmserver.py  will run Flask as a single  asynchronous  process. Problems will arise when multiple requests are made rapidly and the Flask server is still processing the last request. This mostly happens when using sliding z-projection images. To solve this, Flask needs to be run inside a  synchronous  web server such as gunicorn.  If needed, install gunicorn  pip install gunicorn  Start the Flask server inside gunicorn  # on osx (requires sudo)\nsudo gunicorn -bind 0.0.0.0:5010 mmserver:app\n\n# on debian\ngunicorn -b 0.0.0.0:5010 mmserver:app  On another machine, point a browser to the ip address of the machine running the server  http://ip:5010", 
            "title": "To Do"
        }, 
        {
            "location": "/install-client-server/#install-the-qt-desktop-app", 
            "text": "Not done yet", 
            "title": "Install the Qt desktop app"
        }
    ]
}