{
    "docs": [
        {
            "location": "/", 
            "text": "PyMapManager is a Python package to analyze time-series image stacks.\n\n\nPyMapManager opens annotations created with the Igor Pro version of \nMap Manager\n. Allowing additional analysis to easily be performed.\n\n\nThere are three components to PyMapManager:\n\n\n\n\nPython Package\n\n\nServer\n\n\nDesktop application\n\n\n\n\nPyMapManager Python package\n\n\nSee the \n/examples\n folder in the main GitHub repository for example Python code to easily perform additional analysis. Please also see the \nAPI Documentation\n.\n\n\nPyMapManager server\n\n\nThe PyMapManager server allows web-based browsing of annotations and stacks. See \nserver documentation\n for additional information.\n\n\nBrowsing annotations\n\n\n\n\nBrowsing annotations in time series stacks\n\n\n\n\n\n\nPyMapManager deskop application\n\n\nThe Qt version of PyMapManager is a desktop application. See \ngithub repository\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#pymapmanager-python-package", 
            "text": "See the  /examples  folder in the main GitHub repository for example Python code to easily perform additional analysis. Please also see the  API Documentation .", 
            "title": "PyMapManager Python package"
        }, 
        {
            "location": "/#pymapmanager-server", 
            "text": "The PyMapManager server allows web-based browsing of annotations and stacks. See  server documentation  for additional information.", 
            "title": "PyMapManager server"
        }, 
        {
            "location": "/#browsing-annotations", 
            "text": "", 
            "title": "Browsing annotations"
        }, 
        {
            "location": "/#browsing-annotations-in-time-series-stacks", 
            "text": "", 
            "title": "Browsing annotations in time series stacks"
        }, 
        {
            "location": "/#pymapmanager-deskop-application", 
            "text": "The Qt version of PyMapManager is a desktop application. See  github repository .", 
            "title": "PyMapManager deskop application"
        }, 
        {
            "location": "/install-pymapmanager/", 
            "text": "Install pyMapManager Python package\n\n\nDownload the repo\n\n\ngit clone https://github.com/cudmore/PyMapManager.git\n\n\n\nInstall PyMapManager\n\n\npip install -e PyMapManager\n\n\n\nFrom within Python, include the libraries like:\n\n\nfrom pymapmanager import mmMap", 
            "title": "Install PyMapManager"
        }, 
        {
            "location": "/install-pymapmanager/#install-pymapmanager-python-package", 
            "text": "", 
            "title": "Install pyMapManager Python package"
        }, 
        {
            "location": "/install-pymapmanager/#download-the-repo", 
            "text": "git clone https://github.com/cudmore/PyMapManager.git", 
            "title": "Download the repo"
        }, 
        {
            "location": "/install-pymapmanager/#install-pymapmanager", 
            "text": "pip install -e PyMapManager  From within Python, include the libraries like:  from pymapmanager import mmMap", 
            "title": "Install PyMapManager"
        }, 
        {
            "location": "/install-client-server/", 
            "text": "Web based browsing\n\n\nOnce the PyMapManager client/server servers are running, there is a point and click web interface to browse Map Manager annotations and images.\n\n\nBrowsing annotations\n\n\n\n\nBrowsing images\n\n\n\n\n\n\nOverview\n\n\nPyMapManager can serve Map Manager annotations and images using a client/server model. We use two different servers to acheive this\n\n\n\n\nmmserver/mmserver.py\n : Python flask server to provide a REST interface so a web browser can retrieve Map Manager annotations and images\n\n\nmmclient/index.html\n : A front end point-and-click web-browser interface allowing Map Manager annotations and images to be visualized.\n\n\n\n\n1) Installing software to run the servers\n\n\nThe \nmmserver/mmserver.py\n Flask REST server requires the following Python libraries\n\n\npip install flask\npip install flask-cors\npip install scikit-image\n\n\n\n\nRunning the servers requires \ngunicorn\n for the mmserver Flask REST server and \nhttp-server\n for the mmclient server.\n\n\npip install gunicorn\n\n# this assumes you have node and npm install\nnpm install http-server -g\n\n\n\n\nThis is only one way of running these two servers. If you want to run them a different way you are free to do this.\n\n\n2) Starting the client/server for local use (basic)\n\n\nStart both unicorn and http-server with our \nPyMapManager/serve_local.sh\n script.\n\n\nThis will work well if you are only going to be browsing the client/server from the same machine. This will work on MacOS (and Linux).\n\n\nStart the servers with\n\n\ncd PyMapManager\n./serve_local.sh start\n\n\n\n\nStop the servers with\n\n\ncd PyMapManager\n./serve_local.sh stop\n\n\n\n\n3) Manually start both client and server servers\n\n\nStart the \nmmserver/mmserver.py\n REST server\n\n\ncd mmserver\npython mmserver.py\n\n\n\n\nTest this out by pointing a web browser to\n\n\nhttp://127.0.0.1:5010/help\n\n\n\n\nAlternatively, start the \nmmserver.py\n REST server with gunicorn\n\n\ncd mmserver\ngunicorn -b 127.0.0.1:5010 mmserver:app\n\n\n\n\nWrapping the \nmmserver\n to run inside of gunicorn provides a \nsynchronous\n web server. This should handle fast interaction with the web interface much better than the \nasynchronous\n version provided by \npython mmserver.py\n. This is most noticeable when viewing linked sliding z-projections.\n\n\nStart the \nmmclient/index.html\n client server\n\n\nThis is assuming you have node and npm installed. In addition, we are assuming you have used npm to install http-server with \nnpm install http-server -g\n.\n\n\nMake sure \nmmclient/static/mmserver.js\n points to the REST interface. This file should have\n\n\nserverurl = 'http://127.0.0.1:5010/'\n\n\n\n\nRun the mmclient client server\n\n\ncd mmclient\nhttp-server\n\n\n\n\nThe output should look like this\n\n\nStarting up http-server, serving ./\nAvailable on:\n  http://127.0.0.1:8080\n  http://192.168.1.10:8080\nHit CTRL-C to stop the server\n\n\n\n\nYou can then browse the client server at\n\n\nhttp://127.0.0.1:8080\n\n\n\n\n4) Running the client/server on a Linux system with an existing web-server\n\n\nThis requires a pre-existing web server to serve both the client server \nmmclient/index.html\n and the Python Flask REST server \nmmserver/mmserver.py\n.\n\n\nWe have used \nnginx\n with success.\n\n\n\n\nGet a debian system\n\n\nInstall nginx\n\n\n\n\nsudo apt-get install nginx\n\n\n\n\n\n\nCopy the \nmmclient/\n folder into \n/var/www/html/mmclient\n\n\n\n\nsudo cp PyMapManager/mmclient /var/www/html/\n\n\n\n\n\n\n\n\nYou can now access the mmclient as http://nginx_server_ip/mmclient\n\n\n\n\n\n\nMake sure the client in \nmmclient/static/mmserver.js\n is pointing to the REST server (we will run that next).\n\n\n\n\n\n\nsudo pico /var/www/html/mmclient/static/mmserver.js\n\n# make sure the file has\nserverurl = 'http://nginx_server_ip:5010/'\n\n\n\n\n\n\nRun the Flask server with\n\n\n\n\ncd mmserver\nscreen\ngunicorn -b 0.0.0.0:5010 mmserver:app\n# exit screen with ctrl+a then d \n\n\n\n\nThis runs the Flask app \napp\n in the python file \nmmserver.py\n at the address \nhttp://nginx_server_ip:5010\n. We have used \nscreen\n so that when you logout of the terminal, the server continues to run. If you need to stop the server, you can use \nPyMapManager/serve_local.sh stop\n or return to the \nscreen\n session with \nscreen -r\n and hit ctrl+c.\n\n\nCheck the REST server manually by browsing to\n\n\nhttp://nginx_server_ip:5010/help\n\n\n\n\nIf that all works, you can browse some maps at\n\n\nhttp://nginx_server_ip/mmclient\n\n\n\n\nThis will serve the \nmmclient/index.html\n and use the \nmmclient/static/mmserver.js\n file. The \nmmclient/static/mmserver.js\n file will grab annotations and images from the \nmmserver/mmserver.py\n Python Flask REST server via \nhttp://nginx_server_ip:5010\n.", 
            "title": "Install client/server"
        }, 
        {
            "location": "/install-client-server/#web-based-browsing", 
            "text": "Once the PyMapManager client/server servers are running, there is a point and click web interface to browse Map Manager annotations and images.", 
            "title": "Web based browsing"
        }, 
        {
            "location": "/install-client-server/#browsing-annotations", 
            "text": "", 
            "title": "Browsing annotations"
        }, 
        {
            "location": "/install-client-server/#browsing-images", 
            "text": "", 
            "title": "Browsing images"
        }, 
        {
            "location": "/install-client-server/#overview", 
            "text": "PyMapManager can serve Map Manager annotations and images using a client/server model. We use two different servers to acheive this   mmserver/mmserver.py  : Python flask server to provide a REST interface so a web browser can retrieve Map Manager annotations and images  mmclient/index.html  : A front end point-and-click web-browser interface allowing Map Manager annotations and images to be visualized.", 
            "title": "Overview"
        }, 
        {
            "location": "/install-client-server/#1-installing-software-to-run-the-servers", 
            "text": "The  mmserver/mmserver.py  Flask REST server requires the following Python libraries  pip install flask\npip install flask-cors\npip install scikit-image  Running the servers requires  gunicorn  for the mmserver Flask REST server and  http-server  for the mmclient server.  pip install gunicorn\n\n# this assumes you have node and npm install\nnpm install http-server -g  This is only one way of running these two servers. If you want to run them a different way you are free to do this.", 
            "title": "1) Installing software to run the servers"
        }, 
        {
            "location": "/install-client-server/#2-starting-the-clientserver-for-local-use-basic", 
            "text": "Start both unicorn and http-server with our  PyMapManager/serve_local.sh  script.  This will work well if you are only going to be browsing the client/server from the same machine. This will work on MacOS (and Linux).", 
            "title": "2) Starting the client/server for local use (basic)"
        }, 
        {
            "location": "/install-client-server/#start-the-servers-with", 
            "text": "cd PyMapManager\n./serve_local.sh start", 
            "title": "Start the servers with"
        }, 
        {
            "location": "/install-client-server/#stop-the-servers-with", 
            "text": "cd PyMapManager\n./serve_local.sh stop", 
            "title": "Stop the servers with"
        }, 
        {
            "location": "/install-client-server/#3-manually-start-both-client-and-server-servers", 
            "text": "", 
            "title": "3) Manually start both client and server servers"
        }, 
        {
            "location": "/install-client-server/#start-the-mmservermmserverpy-rest-server", 
            "text": "cd mmserver\npython mmserver.py  Test this out by pointing a web browser to  http://127.0.0.1:5010/help  Alternatively, start the  mmserver.py  REST server with gunicorn  cd mmserver\ngunicorn -b 127.0.0.1:5010 mmserver:app  Wrapping the  mmserver  to run inside of gunicorn provides a  synchronous  web server. This should handle fast interaction with the web interface much better than the  asynchronous  version provided by  python mmserver.py . This is most noticeable when viewing linked sliding z-projections.", 
            "title": "Start the mmserver/mmserver.py REST server"
        }, 
        {
            "location": "/install-client-server/#start-the-mmclientindexhtml-client-server", 
            "text": "This is assuming you have node and npm installed. In addition, we are assuming you have used npm to install http-server with  npm install http-server -g .  Make sure  mmclient/static/mmserver.js  points to the REST interface. This file should have  serverurl = 'http://127.0.0.1:5010/'  Run the mmclient client server  cd mmclient\nhttp-server  The output should look like this  Starting up http-server, serving ./\nAvailable on:\n  http://127.0.0.1:8080\n  http://192.168.1.10:8080\nHit CTRL-C to stop the server  You can then browse the client server at  http://127.0.0.1:8080", 
            "title": "Start the mmclient/index.html client server"
        }, 
        {
            "location": "/install-client-server/#4-running-the-clientserver-on-a-linux-system-with-an-existing-web-server", 
            "text": "This requires a pre-existing web server to serve both the client server  mmclient/index.html  and the Python Flask REST server  mmserver/mmserver.py .  We have used  nginx  with success.   Get a debian system  Install nginx   sudo apt-get install nginx   Copy the  mmclient/  folder into  /var/www/html/mmclient   sudo cp PyMapManager/mmclient /var/www/html/    You can now access the mmclient as http://nginx_server_ip/mmclient    Make sure the client in  mmclient/static/mmserver.js  is pointing to the REST server (we will run that next).    sudo pico /var/www/html/mmclient/static/mmserver.js\n\n# make sure the file has\nserverurl = 'http://nginx_server_ip:5010/'   Run the Flask server with   cd mmserver\nscreen\ngunicorn -b 0.0.0.0:5010 mmserver:app\n# exit screen with ctrl+a then d   This runs the Flask app  app  in the python file  mmserver.py  at the address  http://nginx_server_ip:5010 . We have used  screen  so that when you logout of the terminal, the server continues to run. If you need to stop the server, you can use  PyMapManager/serve_local.sh stop  or return to the  screen  session with  screen -r  and hit ctrl+c.  Check the REST server manually by browsing to  http://nginx_server_ip:5010/help  If that all works, you can browse some maps at  http://nginx_server_ip/mmclient  This will serve the  mmclient/index.html  and use the  mmclient/static/mmserver.js  file. The  mmclient/static/mmserver.js  file will grab annotations and images from the  mmserver/mmserver.py  Python Flask REST server via  http://nginx_server_ip:5010 .", 
            "title": "4) Running the client/server on a Linux system with an existing web-server"
        }, 
        {
            "location": "/rest-api/", 
            "text": "Run the server\n\n\ncd mmserver\npython mmserver.py\n\n\n\n\nThis will run the server locally at \nhttp://127.0.0.1:5010\n\n\nIn Python\n\n\nimport json\nimport urllib2\n\nurl='http://cudmore.duckdns.org:5010/v2/public/rr30a/getmaptracing?mapsegment=\nsession=3\nxstat=x\nystat=y\nzstat=z'\n\nmytracing = json.load(urllib2.urlopen(\nurl\n))\n\n# plot with matplotlib\nimport matplotlib.pyplot as plt\nplt.plot(tracing['x'],tracing['y'])\n\n\n\n\nIn Matlab\n\n\nurl='http://cudmore.duckdns.org:5010/getmaximage/public/rr30a/0/2'\nmyimage = webread(url);\nimshow(myimage)\n\n\n\n\nREST API\n\n\nThe following REST routes specify end-points that will return JSON text or images. To use these examples prepend each one with \nhttp://127/0/1/1:5010\n. \n\n\nWe will be using the \npublic\n user and the \nrr30a\n map included in the \nexampleMaps/\n folder.\n\n\nusername\n = public\n\nmapname\n = rr30a\n\n\n\n\nGet help\n\n\n/help\n\n\nGet a list of maps\n\n\n/api/public/maps\n\n\nLoad a map\n\n\n/loadmap/public/rr30a\n\n\nGet annotation values\n\n\nHere we will get an x-stat \ndays\n, a y-stat \npDist\n, and a z-stat \nz\n for map segment 0 across all sessions\n\n\n/v2/public/rr30a/getmapvalues?mapsegment=0\nsession=\nxstat=days\nystat=pDist\nzstat=z\n\n\nGet a tracing\n\n\nHere we will get the x/y/z of a tracing (in um) for all map segments in session 3\n\n\n/v2/public/rr30a/getmaptracing?mapsegment=\nsession=3\nxstat=x\nystat=y\nzstat=z\n\n\nGet an image\n\n\nHere we will get the 20th image in the stack for timepoint 3, channel 2\n\n\n/getimage/public/rr30a/3/2/20\n\n\nGet a sliding Z-Projection image\n\n\nHere we will get a sliding z-projection of the 14th image in the stack for timepoint 5, channel 2\n\n\n/getslidingz/public/rr30a/5/2/14\n\n\nGet a maximal intensity projection\n\n\nHere we will get the maximal intensity projection of timepoint 0, channel 2\n\n\n/getmaximage/public/rr30a/0/2", 
            "title": "REST API"
        }, 
        {
            "location": "/rest-api/#run-the-server", 
            "text": "cd mmserver\npython mmserver.py  This will run the server locally at  http://127.0.0.1:5010", 
            "title": "Run the server"
        }, 
        {
            "location": "/rest-api/#in-python", 
            "text": "import json\nimport urllib2\n\nurl='http://cudmore.duckdns.org:5010/v2/public/rr30a/getmaptracing?mapsegment= session=3 xstat=x ystat=y zstat=z'\n\nmytracing = json.load(urllib2.urlopen( url ))\n\n# plot with matplotlib\nimport matplotlib.pyplot as plt\nplt.plot(tracing['x'],tracing['y'])", 
            "title": "In Python"
        }, 
        {
            "location": "/rest-api/#in-matlab", 
            "text": "url='http://cudmore.duckdns.org:5010/getmaximage/public/rr30a/0/2'\nmyimage = webread(url);\nimshow(myimage)", 
            "title": "In Matlab"
        }, 
        {
            "location": "/rest-api/#rest-api", 
            "text": "The following REST routes specify end-points that will return JSON text or images. To use these examples prepend each one with  http://127/0/1/1:5010 .   We will be using the  public  user and the  rr30a  map included in the  exampleMaps/  folder.  username  = public mapname  = rr30a", 
            "title": "REST API"
        }, 
        {
            "location": "/rest-api/#get-help", 
            "text": "/help", 
            "title": "Get help"
        }, 
        {
            "location": "/rest-api/#get-a-list-of-maps", 
            "text": "/api/public/maps", 
            "title": "Get a list of maps"
        }, 
        {
            "location": "/rest-api/#load-a-map", 
            "text": "/loadmap/public/rr30a", 
            "title": "Load a map"
        }, 
        {
            "location": "/rest-api/#get-annotation-values", 
            "text": "Here we will get an x-stat  days , a y-stat  pDist , and a z-stat  z  for map segment 0 across all sessions  /v2/public/rr30a/getmapvalues?mapsegment=0 session= xstat=days ystat=pDist zstat=z", 
            "title": "Get annotation values"
        }, 
        {
            "location": "/rest-api/#get-a-tracing", 
            "text": "Here we will get the x/y/z of a tracing (in um) for all map segments in session 3  /v2/public/rr30a/getmaptracing?mapsegment= session=3 xstat=x ystat=y zstat=z", 
            "title": "Get a tracing"
        }, 
        {
            "location": "/rest-api/#get-an-image", 
            "text": "Here we will get the 20th image in the stack for timepoint 3, channel 2  /getimage/public/rr30a/3/2/20", 
            "title": "Get an image"
        }, 
        {
            "location": "/rest-api/#get-a-sliding-z-projection-image", 
            "text": "Here we will get a sliding z-projection of the 14th image in the stack for timepoint 5, channel 2  /getslidingz/public/rr30a/5/2/14", 
            "title": "Get a sliding Z-Projection image"
        }, 
        {
            "location": "/rest-api/#get-a-maximal-intensity-projection", 
            "text": "Here we will get the maximal intensity projection of timepoint 0, channel 2  /getmaximage/public/rr30a/0/2", 
            "title": "Get a maximal intensity projection"
        }, 
        {
            "location": "/release-notes/", 
            "text": "To do\n\n\n\n\n[done] Generate API documentation from doc strings\n\n\n[done] Load individual slices dynamically (how to query number of slices in .tif file?)\n\n\n[done] Use the mmserver REST API to make a standalone web-app using Flask, Angular, and Plotly\n\n\n[done] Implement visualization of a spine run in mmserver.\n\n\nMake mmserver link all plot, clicking in one will highlight in other.\n\n\nmmserver needs to use \nmap pool\n so publication data can easily be presented.\n\n\n\n\nMkDocs\n\n\nServe locally\n\n\ncd ~/Dropbox/PyMapManager/docs\nmkdocs serve\n\n\n\n\nPush to github. This needs to be pushed from local github repo, not Dropbox repo.\n\n\ncd ~/Sites/PyMapManager/docs\nmkdocs gh-deploy --clean", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/#to-do", 
            "text": "[done] Generate API documentation from doc strings  [done] Load individual slices dynamically (how to query number of slices in .tif file?)  [done] Use the mmserver REST API to make a standalone web-app using Flask, Angular, and Plotly  [done] Implement visualization of a spine run in mmserver.  Make mmserver link all plot, clicking in one will highlight in other.  mmserver needs to use  map pool  so publication data can easily be presented.", 
            "title": "To do"
        }, 
        {
            "location": "/release-notes/#mkdocs", 
            "text": "Serve locally  cd ~/Dropbox/PyMapManager/docs\nmkdocs serve  Push to github. This needs to be pushed from local github repo, not Dropbox repo.  cd ~/Sites/PyMapManager/docs\nmkdocs gh-deploy --clean", 
            "title": "MkDocs"
        }
    ]
}