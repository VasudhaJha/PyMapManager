{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyMapManager is a suite of Python tools to visualize, annotate, and analyze time-series image volumes. PyMapManager opens annotations created with the Igor Pro version of Map Manager , allowing additional visualization and analysis to easily be performed. There are three components to PyMapManager: A Python package A web server A desktop application. 1) PyMapManager Python package Install with pip install PyMapManager To get started writing Python code to extend Map Manager analysis, see the iPython notebooks in the /examples folder. For more detailed install instructions, see Install PyMapManager . See the API Documentation for a full description of all the classes and functions. 2) PyMapManager server The PyMapManager server provides a web-based front-end to browse Map Manager annotations and images. The PyMapManager server also provides a REST API to retrieve Map Manager annotations and images from within your favorite programming environment. ~~We have an example server to see this in action. Please note, this server is at an early development stage and might not always be available. ~~ Browsing annotations Browsing annotations in time series stacks 3) PyMapManager deskop application Development of this desktop application has been downgraded to focus on the PyMapManager web interface. The Qt version of PyMapManager is a desktop application. See /PyQtMapManager .","title":"Home"},{"location":"#1-pymapmanager-python-package","text":"Install with pip install PyMapManager To get started writing Python code to extend Map Manager analysis, see the iPython notebooks in the /examples folder. For more detailed install instructions, see Install PyMapManager . See the API Documentation for a full description of all the classes and functions.","title":"1) PyMapManager Python package"},{"location":"#2-pymapmanager-server","text":"The PyMapManager server provides a web-based front-end to browse Map Manager annotations and images. The PyMapManager server also provides a REST API to retrieve Map Manager annotations and images from within your favorite programming environment. ~~We have an example server to see this in action. Please note, this server is at an early development stage and might not always be available. ~~","title":"2) PyMapManager server"},{"location":"#browsing-annotations","text":"","title":"Browsing annotations"},{"location":"#browsing-annotations-in-time-series-stacks","text":"","title":"Browsing annotations in time series stacks"},{"location":"#3-pymapmanager-deskop-application","text":"Development of this desktop application has been downgraded to focus on the PyMapManager web interface. The Qt version of PyMapManager is a desktop application. See /PyQtMapManager .","title":"3) PyMapManager deskop application"},{"location":"dev-notes/","text":"Roadmap ToDo Should be very possible to make a docker to install debian+nginx+uwsgi+flask+pymapmanager https://hub.docker.com/r/tiangolo/uwsgi-nginx-flask/ Re-organize mmserver/mmclient into one folder. Have flask server templaes/index.html from python mmserver.py . Have nginx server templates/index.thml as native html/javascript (no flask) Add a configure.html to visually configure server for a username show list of maps in data/ have upload annotations button ask for a hdd folder and upload via rest. will probably not work because web interface is not allowed to operate outside its root directory maybe add a local drop folder to make this possible? User drops a map folder in here (it is inside mmserver/) Get simple login working. I don't understand how Flask session and multiple instances in uwsgi/gunicorn works? Big picture Have web interface load a map pool and plot based on time-point conditions across a number of maps. Goal here is to reproduce figures in a paper. Upload annotations (and eventually images) from within Igor Enable editing and saving of maps via web interface. Make a docker to easily install and run PyMapManager client/server on a local machine (MacOS, Linux, Windows). General posting a map from Igor mmio will allow mmio.postmap() from folder make mmio also post map from zip have igor call an igor script (not part of class library) given a folder path, zip the map and post it then unzip and place files in correct spot add class GlobalMaps() to mmserver. Set and get maps from either a global dict (when run as python mmserver.py) or a redis database when run insode uWSGI Front end javascript Intercept keyboard in leaflet, use this to switch (channel 1, channel 2, channel 3) Group all plotly and then leaflet variables into a dict like mp. and ml. for my plotly and my leaflet. Snap to missing tp data using pivot points. Have rest 'mapinfo' return list of pivot points (from original file) and then javascript interface to set pivot point in javascript Figure out a way to preload or cache already loaded images. Should be some sort of fast hash table but to start, have a dict of {'rr30a_tp_slice': image-data} Set/get cookies in client browser. To do this, place ALL plotly options and then leaflet options into a dict. Save all values in each dict as cookies. marker size leaflet marker size set name for session in session list from (None, original file, session condition) default channel Front end REST Use redis to share data between workers in gunicorn/uWSGI normalize naming conventions all calls start with /api/ Add username/password. Move /data outside of /mmserver/data, outside of github repo in general Use tifffile to read .tif files. We currently read .png with scipy (remove scipy dependency). Client/server runnning on Linux Make sure we can do proper web server. nginx javascript client: nginx redirect http://mapmanager.net/mmclient to /users/cudmore/mmclient flask rest server: nginx redirect http://mapmanager.net/api to mmserver .socket make sure mmserver.js parses web url, strip /mmclient and append /api/ for rest calls redis-server, to allow mmserver.py to run in gunicorn/uWSGI with multiple workers (threads). How often should I clear the database? Maybe load all maps on server start? Back end python package PyMapManager Write code to pool spine intensity across maps based on session condition (done in Igor and Matlab). Add interface to javascript. This will be used to reproduce a figure from a paper. It should be easy, simple, and work really well. Finalize system to detect 'no segments' Make a test run of editing map. As user is working, save work in browser, on 'save' button, push to server and save to file (not redis). Igor Write Igor code to export a vascular map stack db will have 2x type (nodeROI, slabROI) object map will hold just nodeROI (they are linked through time) on click in in plotly/leaflet, don't plotRun() is slabROI (there is no map for slabs Change log 20180301 We now have a docker to install the client/server with zero configuration 20180106 We now open 'otherROI' files Can now set marker size in leaflet maps leflet maps report user click, tp and spine [done] Generate API documentation from doc strings [done] Load individual slices dynamically (how to query number of slices in .tif file?) [done] Use the mmserver REST API to make a standalone web-app using Flask, Angular, and Plotly [done] Implement visualization of a spine run in mmserver. Make mmserver link all plot, clicking in one will highlight in other. mmserver needs to use map pool so publication data can easily be presented. Running development servers cd mmserver python mmserver.py cd mmclient reload -b Sphinx This is to auto generated API documentation from embedded docstrings in the python code using Sphinx. The output is available on readthedocs. 1) Don't foget to add modules that depend on C code to MOCK_MODULES section of conf.py . 2) Whenever I change modules (like when I removed interface/) last ../version.py should exclude pymapmanager/version.py from output. Note: I am using pymapmanager/version.py to import a common version into PyMapManager/setup.py and inserting version into pymapmanager module (via pymapmanager/ init .py) cd PyMapManager/pymapmanager/docs sphinx-apidoc -f -o source ../ ../version.py Output should look like: Creating file source/pymapmanager.rst. Creating file source/modules.rst. 3) Make the docs in /build/ cd PyMapManager/pymapmanager/docs #sphinx-build -b html source/ build #sphinx-build -b html . build make html 4) Push to Github and then go to ReadTheDocs and click build . This relies on a webhook made inside the Github repo (forgot exactly how/where). MkDocs This is for 'human readable' documentation website available at http://blog.cudore.io/PyMapMAnager Serve locally cd ~/Dropbox/PyMapManager/docs mkdocs serve Push to github. This needs to be pushed from local github repo, not Dropbox repo. cd ~/Sites/PyMapManager/docs mkdocs gh-deploy --clean Synchronize with Unison # Unison preferences file root = /Users/cudmore/Dropbox/PyMapManager/ root = /Users/cudmore/Sites/PyMapManager ignore = Name .DS_Store ignore = Name *.DS_Store ignore = Name *.pyc ignore = Name *.tif ignore = Name *.egg-info ignore = Path .git ignore = Path .idea #when synchronizing between platforms or hdd formats #rsrc = false #perms = 0 # Be fast even on Windows #fastcheck = yes #servercmd=/home1/robertcu/unison Export iPython notebooks to html jupyter nbconvert --ExecutePreprocessor.kernel_name=python3 --to html --execute --ExecutePreprocessor.timeout=120 jupyter nbconvert --ExecutePreprocessor.kernel_name=python2 --to html --execute --ExecutePreprocessor.timeout=120 Search and replace across a number of files search for windows and replace with linux grep -rl 'windows' ./ | xargs sed -i 's/windows/linux/g' grep -rl 'windows' ./ | xargs sed -i \"\" 's/windows/linux/g' find ./ -type f -exec sed -i \"\" \"s/oldstring/new string/g\" {} \\; search all files in current directory ./ for and replace with `` grep -rl ' ' ./ | xargs sed -i \"\" 's/ //g' from /PyMapMAnager/docs, search for ' ' and replace it with '' grep -rl ' ' ./docs/examples | xargs sed -i \"\" 's/ //g' Pushing changes to home Debian server Use Unison to update entire PyMapManager folder (pymapmanager, mmclient, mmserver) This lives in /home/cudmore/PyMapManager If I changed core soure code, make sure pymapmanager is updated cd pip uninstall PyMapManager pip install -e PyMapManager Copy mmclient into /var/www/html cd cd PyMapManager sudo cp -fr mmclient /var/www/html/ Run mmserver/ in screen using gunicorn Make sure it is not already running with screen -r . Or with ps -aux | grep gunicorn cd cd PyMapManager/mmserver screen gunicorn -b 0.0.0.0:5010 mmserver:app Pushing changes in mmclient/ to robertcudmore.org No need for this any more ! Pushing to PyPi Version 0.0.1 is working with pip install PyMapManager ! This will be available at https://pypi.python.org/pypi/pymapmanager and can be installed with pip install PyMapManager . There is also a test server at https://testpypi.python.org/pypi Make sure there is a ~/.pypirc file [distutils] index-servers = pypi pypitest [pypi] username=your_username password=your_password [pypitest] username=your_username password=your_password Update version in PyMapManager/setup.py version='0.0.1', Makes .tar.gz in dist/ cd PyMapManager python setup.py sdist 4.1 push to test server python setup.py sdist upload -r pypitest 4.2. Push to PyPi website python setup.py sdist upload images I need to decide between mmServer.py is using from skimage.io import imsave, imread mmMap is using import scipy.misc cookies see: https://stackoverflow.com/questions/14573223/set-cookie-and-get-cookie-with-javascript redis flask server We need to use a global database when running production server where mmserver is spawned into multiple processes and can not share global python objects. Redis requires a bit of work to package objects into json serializable objects so for now just use pickle to do the heaver lifting. Map rr30 is ~24 MB when pickled, rough estimate is we get ~44 picked maps per 1 GB of memory (in practice we will get a bit more). install redis-server # osx brew install redis # linux sudo apt-get install redis Make redis-server run at system boot osx To have launchd start redis now and restart at login: brew services start redis Or, if you don't want/need a background service you can just run: redis-server /usr/local/etc/redis.conf # linux figure this out Run redis server manually redis-server Check redis-server is running redis-cli ping To clear all data from server redis-cli FLUSHALL run in development mode (on osx) cd cd PyMapManager/mmserver sudo gunicorn -w 4 -b 127.0.0.1:5010 mmserver:app #!/bin/python ''' # for code to put/get from redis server # see: http://calderonroberto.com/blog/flask-and-redis-is-fun/ # Dependencies: # pip install flask # pip install redis # # Then run server with `redis-server`, default address is 127.0.0.1:6379 # Re-running the server still has old data # To clear, use redis-cli (while server is running) # redis-cli FLUSHALL ## Install redis-server This should install as a running service, check that it is still running on reboot ### On OSX brew install redis-server ### On debian sudo apt-get install redis-server ## Clear the whole redis server (all its databases) redis-cli FLUSHALL ## can't add python class objects to redis, use pickle https://stackoverflow.com/questions/15219858/how-to-store-a-complex-object-in-redis-using-redis-py ''' from flask import Flask from flask import request import flask import redis import time import json from flask import Response, stream_with_context # see: https://stackoverflow.com/questions/15219858/how-to-store-a-complex-object-in-redis-using-redis-py import pickle from pymapmanager.mmMap import mmMap app = Flask(__name__) app.debug = True db = redis.Redis('localhost') #connect to server ttl = 31104000 #one year @app.route('/set/<themap>') def one(themap): print 'themap:', themap mappath = '/Users/cudmore/Dropbox/PyMapManager/mmserver/data/public/' + themap + '/' + themap + '.txt' m = mmMap(mappath) pickled_object = pickle.dumps(m) db.set(themap, pickled_object) # themap is a string key '' here #db.delete(themap) #db.hmset(themap, {'a':1}) return 'ok' @app.route('/get/<themap>') def two(themap): if not db.exists(themap): return \"Error: redis map doesn't exist\" mapObject = pickle.loads(db.get(themap)) print 'mapObject:', mapObject #event = db.hgetall(themap) #print 'event:', event #return json.dumps(event) return json.dumps(str(mapObject)) if __name__ == \"__main__\": app.run() Debian Redis /etc/init.d/redis-server stop nginx sudo service nginx stop","title":"Development Notes"},{"location":"dev-notes/#roadmap","text":"","title":"Roadmap"},{"location":"dev-notes/#todo","text":"Should be very possible to make a docker to install debian+nginx+uwsgi+flask+pymapmanager https://hub.docker.com/r/tiangolo/uwsgi-nginx-flask/ Re-organize mmserver/mmclient into one folder. Have flask server templaes/index.html from python mmserver.py . Have nginx server templates/index.thml as native html/javascript (no flask) Add a configure.html to visually configure server for a username show list of maps in data/ have upload annotations button ask for a hdd folder and upload via rest. will probably not work because web interface is not allowed to operate outside its root directory maybe add a local drop folder to make this possible? User drops a map folder in here (it is inside mmserver/) Get simple login working. I don't understand how Flask session and multiple instances in uwsgi/gunicorn works?","title":"ToDo"},{"location":"dev-notes/#big-picture","text":"Have web interface load a map pool and plot based on time-point conditions across a number of maps. Goal here is to reproduce figures in a paper. Upload annotations (and eventually images) from within Igor Enable editing and saving of maps via web interface. Make a docker to easily install and run PyMapManager client/server on a local machine (MacOS, Linux, Windows).","title":"Big picture"},{"location":"dev-notes/#general","text":"posting a map from Igor mmio will allow mmio.postmap() from folder make mmio also post map from zip have igor call an igor script (not part of class library) given a folder path, zip the map and post it then unzip and place files in correct spot add class GlobalMaps() to mmserver. Set and get maps from either a global dict (when run as python mmserver.py) or a redis database when run insode uWSGI","title":"General"},{"location":"dev-notes/#front-end-javascript","text":"Intercept keyboard in leaflet, use this to switch (channel 1, channel 2, channel 3) Group all plotly and then leaflet variables into a dict like mp. and ml. for my plotly and my leaflet. Snap to missing tp data using pivot points. Have rest 'mapinfo' return list of pivot points (from original file) and then javascript interface to set pivot point in javascript Figure out a way to preload or cache already loaded images. Should be some sort of fast hash table but to start, have a dict of {'rr30a_tp_slice': image-data} Set/get cookies in client browser. To do this, place ALL plotly options and then leaflet options into a dict. Save all values in each dict as cookies. marker size leaflet marker size set name for session in session list from (None, original file, session condition) default channel","title":"Front end javascript"},{"location":"dev-notes/#front-end-rest","text":"Use redis to share data between workers in gunicorn/uWSGI normalize naming conventions all calls start with /api/ Add username/password. Move /data outside of /mmserver/data, outside of github repo in general Use tifffile to read .tif files. We currently read .png with scipy (remove scipy dependency).","title":"Front end REST"},{"location":"dev-notes/#clientserver-runnning-on-linux","text":"Make sure we can do proper web server. nginx javascript client: nginx redirect http://mapmanager.net/mmclient to /users/cudmore/mmclient flask rest server: nginx redirect http://mapmanager.net/api to mmserver .socket make sure mmserver.js parses web url, strip /mmclient and append /api/ for rest calls redis-server, to allow mmserver.py to run in gunicorn/uWSGI with multiple workers (threads). How often should I clear the database? Maybe load all maps on server start?","title":"Client/server runnning on Linux"},{"location":"dev-notes/#back-end-python-package-pymapmanager","text":"Write code to pool spine intensity across maps based on session condition (done in Igor and Matlab). Add interface to javascript. This will be used to reproduce a figure from a paper. It should be easy, simple, and work really well. Finalize system to detect 'no segments' Make a test run of editing map. As user is working, save work in browser, on 'save' button, push to server and save to file (not redis).","title":"Back end python package PyMapManager"},{"location":"dev-notes/#igor","text":"Write Igor code to export a vascular map stack db will have 2x type (nodeROI, slabROI) object map will hold just nodeROI (they are linked through time) on click in in plotly/leaflet, don't plotRun() is slabROI (there is no map for slabs","title":"Igor"},{"location":"dev-notes/#change-log","text":"20180301 We now have a docker to install the client/server with zero configuration 20180106 We now open 'otherROI' files Can now set marker size in leaflet maps leflet maps report user click, tp and spine [done] Generate API documentation from doc strings [done] Load individual slices dynamically (how to query number of slices in .tif file?) [done] Use the mmserver REST API to make a standalone web-app using Flask, Angular, and Plotly [done] Implement visualization of a spine run in mmserver. Make mmserver link all plot, clicking in one will highlight in other. mmserver needs to use map pool so publication data can easily be presented.","title":"Change log"},{"location":"dev-notes/#running-development-servers","text":"cd mmserver python mmserver.py cd mmclient reload -b","title":"Running development servers"},{"location":"dev-notes/#sphinx","text":"This is to auto generated API documentation from embedded docstrings in the python code using Sphinx. The output is available on readthedocs. 1) Don't foget to add modules that depend on C code to MOCK_MODULES section of conf.py . 2) Whenever I change modules (like when I removed interface/) last ../version.py should exclude pymapmanager/version.py from output. Note: I am using pymapmanager/version.py to import a common version into PyMapManager/setup.py and inserting version into pymapmanager module (via pymapmanager/ init .py) cd PyMapManager/pymapmanager/docs sphinx-apidoc -f -o source ../ ../version.py Output should look like: Creating file source/pymapmanager.rst. Creating file source/modules.rst. 3) Make the docs in /build/ cd PyMapManager/pymapmanager/docs #sphinx-build -b html source/ build #sphinx-build -b html . build make html 4) Push to Github and then go to ReadTheDocs and click build . This relies on a webhook made inside the Github repo (forgot exactly how/where).","title":"Sphinx"},{"location":"dev-notes/#mkdocs","text":"This is for 'human readable' documentation website available at http://blog.cudore.io/PyMapMAnager Serve locally cd ~/Dropbox/PyMapManager/docs mkdocs serve Push to github. This needs to be pushed from local github repo, not Dropbox repo. cd ~/Sites/PyMapManager/docs mkdocs gh-deploy --clean","title":"MkDocs"},{"location":"dev-notes/#synchronize-with-unison","text":"# Unison preferences file root = /Users/cudmore/Dropbox/PyMapManager/ root = /Users/cudmore/Sites/PyMapManager ignore = Name .DS_Store ignore = Name *.DS_Store ignore = Name *.pyc ignore = Name *.tif ignore = Name *.egg-info ignore = Path .git ignore = Path .idea #when synchronizing between platforms or hdd formats #rsrc = false #perms = 0 # Be fast even on Windows #fastcheck = yes #servercmd=/home1/robertcu/unison","title":"Synchronize with Unison"},{"location":"dev-notes/#export-ipython-notebooks-to-html","text":"jupyter nbconvert --ExecutePreprocessor.kernel_name=python3 --to html --execute --ExecutePreprocessor.timeout=120 jupyter nbconvert --ExecutePreprocessor.kernel_name=python2 --to html --execute --ExecutePreprocessor.timeout=120","title":"Export iPython notebooks to html"},{"location":"dev-notes/#search-and-replace-across-a-number-of-files","text":"search for windows and replace with linux grep -rl 'windows' ./ | xargs sed -i 's/windows/linux/g' grep -rl 'windows' ./ | xargs sed -i \"\" 's/windows/linux/g' find ./ -type f -exec sed -i \"\" \"s/oldstring/new string/g\" {} \\; search all files in current directory ./ for and replace with `` grep -rl ' ' ./ | xargs sed -i \"\" 's/ //g' from /PyMapMAnager/docs, search for ' ' and replace it with '' grep -rl ' ' ./docs/examples | xargs sed -i \"\" 's/ //g'","title":"Search and replace across a number of files"},{"location":"dev-notes/#pushing-changes-to-home-debian-server","text":"Use Unison to update entire PyMapManager folder (pymapmanager, mmclient, mmserver) This lives in /home/cudmore/PyMapManager If I changed core soure code, make sure pymapmanager is updated cd pip uninstall PyMapManager pip install -e PyMapManager Copy mmclient into /var/www/html cd cd PyMapManager sudo cp -fr mmclient /var/www/html/ Run mmserver/ in screen using gunicorn Make sure it is not already running with screen -r . Or with ps -aux | grep gunicorn cd cd PyMapManager/mmserver screen gunicorn -b 0.0.0.0:5010 mmserver:app","title":"Pushing changes to home Debian server"},{"location":"dev-notes/#pushing-changes-in-mmclient-to-robertcudmoreorg","text":"No need for this any more !","title":"Pushing changes in mmclient/ to robertcudmore.org"},{"location":"dev-notes/#pushing-to-pypi","text":"Version 0.0.1 is working with pip install PyMapManager ! This will be available at https://pypi.python.org/pypi/pymapmanager and can be installed with pip install PyMapManager . There is also a test server at https://testpypi.python.org/pypi Make sure there is a ~/.pypirc file [distutils] index-servers = pypi pypitest [pypi] username=your_username password=your_password [pypitest] username=your_username password=your_password Update version in PyMapManager/setup.py version='0.0.1', Makes .tar.gz in dist/ cd PyMapManager python setup.py sdist 4.1 push to test server python setup.py sdist upload -r pypitest 4.2. Push to PyPi website python setup.py sdist upload","title":"Pushing to PyPi"},{"location":"dev-notes/#images","text":"I need to decide between mmServer.py is using from skimage.io import imsave, imread mmMap is using import scipy.misc","title":"images"},{"location":"dev-notes/#cookies","text":"see: https://stackoverflow.com/questions/14573223/set-cookie-and-get-cookie-with-javascript","title":"cookies"},{"location":"dev-notes/#redis-flask-server","text":"We need to use a global database when running production server where mmserver is spawned into multiple processes and can not share global python objects. Redis requires a bit of work to package objects into json serializable objects so for now just use pickle to do the heaver lifting. Map rr30 is ~24 MB when pickled, rough estimate is we get ~44 picked maps per 1 GB of memory (in practice we will get a bit more).","title":"redis flask server"},{"location":"dev-notes/#install-redis-server","text":"# osx brew install redis # linux sudo apt-get install redis","title":"install redis-server"},{"location":"dev-notes/#make-redis-server-run-at-system-boot","text":"osx To have launchd start redis now and restart at login: brew services start redis Or, if you don't want/need a background service you can just run: redis-server /usr/local/etc/redis.conf # linux figure this out","title":"Make redis-server run at system boot"},{"location":"dev-notes/#run-redis-server-manually","text":"redis-server","title":"Run redis server manually"},{"location":"dev-notes/#check-redis-server-is-running","text":"redis-cli ping","title":"Check redis-server is running"},{"location":"dev-notes/#to-clear-all-data-from-server","text":"redis-cli FLUSHALL","title":"To clear all data from server"},{"location":"dev-notes/#run-in-development-mode-on-osx","text":"cd cd PyMapManager/mmserver sudo gunicorn -w 4 -b 127.0.0.1:5010 mmserver:app #!/bin/python ''' # for code to put/get from redis server # see: http://calderonroberto.com/blog/flask-and-redis-is-fun/ # Dependencies: # pip install flask # pip install redis # # Then run server with `redis-server`, default address is 127.0.0.1:6379 # Re-running the server still has old data # To clear, use redis-cli (while server is running) # redis-cli FLUSHALL ## Install redis-server This should install as a running service, check that it is still running on reboot ### On OSX brew install redis-server ### On debian sudo apt-get install redis-server ## Clear the whole redis server (all its databases) redis-cli FLUSHALL ## can't add python class objects to redis, use pickle https://stackoverflow.com/questions/15219858/how-to-store-a-complex-object-in-redis-using-redis-py ''' from flask import Flask from flask import request import flask import redis import time import json from flask import Response, stream_with_context # see: https://stackoverflow.com/questions/15219858/how-to-store-a-complex-object-in-redis-using-redis-py import pickle from pymapmanager.mmMap import mmMap app = Flask(__name__) app.debug = True db = redis.Redis('localhost') #connect to server ttl = 31104000 #one year @app.route('/set/<themap>') def one(themap): print 'themap:', themap mappath = '/Users/cudmore/Dropbox/PyMapManager/mmserver/data/public/' + themap + '/' + themap + '.txt' m = mmMap(mappath) pickled_object = pickle.dumps(m) db.set(themap, pickled_object) # themap is a string key '' here #db.delete(themap) #db.hmset(themap, {'a':1}) return 'ok' @app.route('/get/<themap>') def two(themap): if not db.exists(themap): return \"Error: redis map doesn't exist\" mapObject = pickle.loads(db.get(themap)) print 'mapObject:', mapObject #event = db.hgetall(themap) #print 'event:', event #return json.dumps(event) return json.dumps(str(mapObject)) if __name__ == \"__main__\": app.run()","title":"run in development mode (on osx)"},{"location":"dev-notes/#debian","text":"","title":"Debian"},{"location":"dev-notes/#redis","text":"/etc/init.d/redis-server stop","title":"Redis"},{"location":"dev-notes/#nginx","text":"sudo service nginx stop","title":"nginx"},{"location":"install-pymapmanager/","text":"Install from PyPi pip install PyMapManager Install from a manual download 1) Download the repo git clone --depth=1 https://github.com/cudmore/PyMapManager.git 2) Install PyMapManager (from the downloaded folder) cd PyMapManager python setup.py install Testing the install from a python prompt Load an example map from pymapmanager import mmMap path = 'PyMapManager/examples/exampleMaps/rr30a' myMap = mmMap(path) You should see (exact seconds will vary) map rr30a loaded in 0.45 seconds. Then type print myMap And you should see map:rr30a map segments:5 stacks:9 total object:2467 We have tons more examples Head over to the examples/ folder in the main Github repository. Running Jupyter notebooks At this point, it is super simple to run all the example Jupyter notebooks interactively. Back at a command prompt, not in Python, enter the following commands to open a web page with interactive examples. pip install jupyter cd PyMapManager/examples jupyter notebook","title":"Install PyMapManager"},{"location":"install-pymapmanager/#install-from-pypi","text":"pip install PyMapManager","title":"Install from PyPi"},{"location":"install-pymapmanager/#install-from-a-manual-download","text":"","title":"Install from a manual download"},{"location":"install-pymapmanager/#1-download-the-repo","text":"git clone --depth=1 https://github.com/cudmore/PyMapManager.git","title":"1) Download the repo"},{"location":"install-pymapmanager/#2-install-pymapmanager-from-the-downloaded-folder","text":"cd PyMapManager python setup.py install","title":"2) Install PyMapManager (from the downloaded folder)"},{"location":"install-pymapmanager/#testing-the-install-from-a-python-prompt","text":"Load an example map from pymapmanager import mmMap path = 'PyMapManager/examples/exampleMaps/rr30a' myMap = mmMap(path) You should see (exact seconds will vary) map rr30a loaded in 0.45 seconds. Then type print myMap And you should see map:rr30a map segments:5 stacks:9 total object:2467","title":"Testing the install from a python prompt"},{"location":"install-pymapmanager/#we-have-tons-more-examples","text":"Head over to the examples/ folder in the main Github repository.","title":"We have tons more examples"},{"location":"install-pymapmanager/#running-jupyter-notebooks","text":"At this point, it is super simple to run all the example Jupyter notebooks interactively. Back at a command prompt, not in Python, enter the following commands to open a web page with interactive examples. pip install jupyter cd PyMapManager/examples jupyter notebook","title":"Running Jupyter notebooks"},{"location":"install-server/","text":"Web based browsing The PyMapManager server allows Map Manager annotations and time-series images to be browsed with a web interface. It is really easy to run the server on your local machine. For a production level server we provide a Docker container. ~~For instant satisfaction, we have an experimental server you can use right now.~~ Browsing annotations Browsing images Download To run the server locally, you need some data! Example data can be downloaded from the PyMapManager-Data repository. The first thing to do is to clone both the PyMapManager and the PyMapManager-Data repositories. git clone --depth=1 https://github.com/cudmore/PyMapManager.git git clone --depth=1 https://github.com/mapmanager/PyMapManager-Data.git Running the server. 1) Using Python Simplest case is to use python mmserver.py and you should be up in no time. Please note, while this method is easy, it runs the server as a single thread/worker and the interface will be slower than it should be. # work from PyMapManager folder cd PyMapManager # create a virtual environment in folder `mm_env` python -m venv mm_env # activate virtual environment source mm_env/bin/activate # install pymapmanager (-e will allow you to change source code) pip install -e . # install required server libraries pip install -r mmserver/requirements.txt # run the server cd mmserver python mmserver.py Point your browser to http://localhost:5000 and have fun browsing. 2) Using the Docker container Running the server from within a Docker container has lots of benefits. First off, the Docker container spins up a proper nginx web server and runs multiple copies of the python code in mmserver.py. With this system, the server is really responsive even when multiple requests are coming in fast as happens when images are scrolled. To get started, download and install Docker Community Edition (CE) . 2.1) Using docker-compose If you want to run the server inside a Docker container, the easiest option is to use docker-compose . Using this technique makes a very efficient production level server and is exactly the same code-base we use to make world accessible PyMapManager site. Build cd PyMapManager docker-compose build # this will take a few minutes the first time it is run Run docker-compose up Point your browser to http://localhost and have fun browsing. Stop docker-compose down # stop all docker containers docker stop $(docker ps -aq) 2.2) Using docker If you prefer to run the docker services separately and specify paths on the command line. Build cd PyMapManager docker build -t myimage . # the dot is important Redis docker run -d --name redis -p 6379:6379 redis Nginx server In the following docker command, /Users/cudmore/Dropbox/PyMapManager-Data has to be changed to point to the full path of your local copy of PyMapManager-Data . cd PyMapManager docker run --name mycontainer -p 80:80 -v /Users/cudmore/Dropbox/PyMapManager-Data:/PyMapManager-Data --link redis myimage Point your browser to http://localhost and have fun browsing. Stop docker stop mycontainer docker rm mycontainer docker stop redis docker rm redis","title":"Install Server"},{"location":"install-server/#web-based-browsing","text":"The PyMapManager server allows Map Manager annotations and time-series images to be browsed with a web interface. It is really easy to run the server on your local machine. For a production level server we provide a Docker container. ~~For instant satisfaction, we have an experimental server you can use right now.~~","title":"Web based browsing"},{"location":"install-server/#browsing-annotations","text":"","title":"Browsing annotations"},{"location":"install-server/#browsing-images","text":"","title":"Browsing images"},{"location":"install-server/#download","text":"To run the server locally, you need some data! Example data can be downloaded from the PyMapManager-Data repository. The first thing to do is to clone both the PyMapManager and the PyMapManager-Data repositories. git clone --depth=1 https://github.com/cudmore/PyMapManager.git git clone --depth=1 https://github.com/mapmanager/PyMapManager-Data.git","title":"Download"},{"location":"install-server/#running-the-server","text":"","title":"Running the server."},{"location":"install-server/#1-using-python","text":"Simplest case is to use python mmserver.py and you should be up in no time. Please note, while this method is easy, it runs the server as a single thread/worker and the interface will be slower than it should be. # work from PyMapManager folder cd PyMapManager # create a virtual environment in folder `mm_env` python -m venv mm_env # activate virtual environment source mm_env/bin/activate # install pymapmanager (-e will allow you to change source code) pip install -e . # install required server libraries pip install -r mmserver/requirements.txt # run the server cd mmserver python mmserver.py Point your browser to http://localhost:5000 and have fun browsing.","title":"1) Using Python"},{"location":"install-server/#2-using-the-docker-container","text":"Running the server from within a Docker container has lots of benefits. First off, the Docker container spins up a proper nginx web server and runs multiple copies of the python code in mmserver.py. With this system, the server is really responsive even when multiple requests are coming in fast as happens when images are scrolled. To get started, download and install Docker Community Edition (CE) .","title":"2) Using the Docker container"},{"location":"install-server/#21-using-docker-compose","text":"If you want to run the server inside a Docker container, the easiest option is to use docker-compose . Using this technique makes a very efficient production level server and is exactly the same code-base we use to make world accessible PyMapManager site.","title":"2.1) Using docker-compose"},{"location":"install-server/#build","text":"cd PyMapManager docker-compose build # this will take a few minutes the first time it is run","title":"Build"},{"location":"install-server/#run","text":"docker-compose up Point your browser to http://localhost and have fun browsing.","title":"Run"},{"location":"install-server/#stop","text":"docker-compose down # stop all docker containers docker stop $(docker ps -aq)","title":"Stop"},{"location":"install-server/#22-using-docker","text":"If you prefer to run the docker services separately and specify paths on the command line.","title":"2.2) Using docker"},{"location":"install-server/#build_1","text":"cd PyMapManager docker build -t myimage . # the dot is important","title":"Build"},{"location":"install-server/#redis","text":"docker run -d --name redis -p 6379:6379 redis","title":"Redis"},{"location":"install-server/#nginx-server","text":"In the following docker command, /Users/cudmore/Dropbox/PyMapManager-Data has to be changed to point to the full path of your local copy of PyMapManager-Data . cd PyMapManager docker run --name mycontainer -p 80:80 -v /Users/cudmore/Dropbox/PyMapManager-Data:/PyMapManager-Data --link redis myimage Point your browser to http://localhost and have fun browsing.","title":"Nginx server"},{"location":"install-server/#stop_1","text":"docker stop mycontainer docker rm mycontainer docker stop redis docker rm redis","title":"Stop"},{"location":"open-source/","text":"PyMapManager only exists because of the massive amount of creativity, expertise, and effort that has been put in to creating and maintaining a slew of open-source software projects. Server Debian - Operating system NGINX - Web server for load balancing, microservices, and API gateways uwsgi - Web standard for NGINX to talk to Python Python (back-end) Flask - Web microframework SciPy - Scientific computing ecosystem NumPy - Scientific computing for Python Pandas - Data analysis library Matplotlib - Plotting Tifffile - General purpose Tiff file library Redis - Database Celery - Distributed task queue Javascript (front-end) Angular - Superheroic Javascript framework JQuery D3 - Data driven documents Leaflet - Interactive maps Plotly - Modern visualization for the data era Bootstrap - Worlds most popular HTML/CSS/JS Toolkit Containers Docker - Software containers are the future Documentation Jekyll - Static site generator (Main Map Manager documentation) mkDocs - Static site generator (This Website) Sphinx - To create documentation ( PyMapManager API Documentation ) Distribution Github - Software development platform for online storage/sharing/computation PyPi - Python package index for online distribution","title":"Open Source"},{"location":"open-source/#server","text":"Debian - Operating system NGINX - Web server for load balancing, microservices, and API gateways uwsgi - Web standard for NGINX to talk to Python","title":"Server"},{"location":"open-source/#python-back-end","text":"Flask - Web microframework SciPy - Scientific computing ecosystem NumPy - Scientific computing for Python Pandas - Data analysis library Matplotlib - Plotting Tifffile - General purpose Tiff file library Redis - Database Celery - Distributed task queue","title":"Python (back-end)"},{"location":"open-source/#javascript-front-end","text":"Angular - Superheroic Javascript framework JQuery D3 - Data driven documents Leaflet - Interactive maps Plotly - Modern visualization for the data era Bootstrap - Worlds most popular HTML/CSS/JS Toolkit","title":"Javascript (front-end)"},{"location":"open-source/#containers","text":"Docker - Software containers are the future","title":"Containers"},{"location":"open-source/#documentation","text":"Jekyll - Static site generator (Main Map Manager documentation) mkDocs - Static site generator (This Website) Sphinx - To create documentation ( PyMapManager API Documentation )","title":"Documentation"},{"location":"open-source/#distribution","text":"Github - Software development platform for online storage/sharing/computation PyPi - Python package index for online distribution","title":"Distribution"},{"location":"release-notes/","text":"To do [done] Generate API documentation from doc strings [done] Load individual slices dynamically (how to query number of slices in .tif file?) [done] Use the mmserver REST API to make a standalone web-app using Flask, Angular, and Plotly [done] Implement visualization of a spine run in mmserver. Make mmserver link all plot, clicking in one will highlight in other. mmserver needs to use map pool so publication data can easily be presented. MkDocs Serve locally cd ~/Dropbox/PyMapManager/docs mkdocs serve Push to github. This needs to be pushed from local github repo, not Dropbox repo. cd ~/Sites/PyMapManager/docs mkdocs gh-deploy --clean Synchronize with Unison # Unison preferences file root = /Users/cudmore/Dropbox/PyMapManager/ root = /Users/cudmore/Sites/PyMapManager ignore = Name .DS_Store ignore = Name *.DS_Store ignore = Name *.pyc ignore = Name *.tif ignore = Name *.egg-info ignore = Path .git ignore = Path .idea #when synchronizing between platforms or hdd formats #rsrc = false #perms = 0 # Be fast even on Windows #fastcheck = yes #servercmd=/home1/robertcu/unison","title":"Release notes"},{"location":"release-notes/#to-do","text":"[done] Generate API documentation from doc strings [done] Load individual slices dynamically (how to query number of slices in .tif file?) [done] Use the mmserver REST API to make a standalone web-app using Flask, Angular, and Plotly [done] Implement visualization of a spine run in mmserver. Make mmserver link all plot, clicking in one will highlight in other. mmserver needs to use map pool so publication data can easily be presented.","title":"To do"},{"location":"release-notes/#mkdocs","text":"Serve locally cd ~/Dropbox/PyMapManager/docs mkdocs serve Push to github. This needs to be pushed from local github repo, not Dropbox repo. cd ~/Sites/PyMapManager/docs mkdocs gh-deploy --clean","title":"MkDocs"},{"location":"release-notes/#synchronize-with-unison","text":"# Unison preferences file root = /Users/cudmore/Dropbox/PyMapManager/ root = /Users/cudmore/Sites/PyMapManager ignore = Name .DS_Store ignore = Name *.DS_Store ignore = Name *.pyc ignore = Name *.tif ignore = Name *.egg-info ignore = Path .git ignore = Path .idea #when synchronizing between platforms or hdd formats #rsrc = false #perms = 0 # Be fast even on Windows #fastcheck = yes #servercmd=/home1/robertcu/unison","title":"Synchronize with Unison"},{"location":"rest-api/","text":"Using the REST API in a program In addition to the browser interface, the PyMapManager server provides a REST interface allowing Map Manager data to be retrieved from almost any programming environment. In Python using the PyMapManager package from pymapmanager import mmMap urlmap = 'rr30a' m = mmMap(urlmap=urlmap) What we just did was very powerful. We just loaded a map from an internet REST server! In pure Python import json import urllib2 url='http://localhost:5000/api/v1/getmaptracing/public/rr30a?mapsegment=&session=3&xstat=x&ystat=y&zstat=z' mytracing = json.load(urllib2.urlopen(\"url\")) # plot with matplotlib import matplotlib.pyplot as plt plt.plot(mytracing['x'],mytracing['y']) In Matlab url='http://localhost:5000/api/v1/getmaximage/public/rr30a/0/2' myimage = webread(url); imshow(myimage) In Igor print fetchurl(\"http://localhost:5000/api/v1/maplist/public\") REST API The following REST routes specify end-points that will return JSON text or images. We will be using the public user and the rr30a map included in the mmserver/data/ folder. The links on this page point to a development server that may or may not be running. Get help http://localhost:5000/help Get a list of maps http://localhost:5000/api/v1/maplist/public Load a map api/v1/loadmap/public/rr30a Get annotation values Here we will get an x-stat days , a y-stat pDist , and a z-stat z for map segment 0 across all sessions http://localhost:5000/v2/public/rr30a/getmapvalues?mapsegment=0&session=&xstat=days&ystat=pDist&zstat=z Get a tracing Here we will get the x/y/z of a tracing (in um) for all map segments in session 3 http://localhost:5000/v2/public/rr30a/getmaptracing?mapsegment=&session=3&xstat=x&ystat=y&zstat=z Get an image Here we will get the 20th image in the stack for timepoint 3, channel 2 http://localhost:5000/getimage/public/rr30a/3/2/20 Get a maximal intensity projection Here we will get the maximal intensity projection of timepoint 0, channel 2 http://localhost:5000/getmaximage/public/rr30a/0/2 getimage :","title":"REST API"},{"location":"rest-api/#using-the-rest-api-in-a-program","text":"In addition to the browser interface, the PyMapManager server provides a REST interface allowing Map Manager data to be retrieved from almost any programming environment.","title":"Using the REST API in a program"},{"location":"rest-api/#in-python-using-the-pymapmanager-package","text":"from pymapmanager import mmMap urlmap = 'rr30a' m = mmMap(urlmap=urlmap) What we just did was very powerful. We just loaded a map from an internet REST server!","title":"In Python using the PyMapManager package"},{"location":"rest-api/#in-pure-python","text":"import json import urllib2 url='http://localhost:5000/api/v1/getmaptracing/public/rr30a?mapsegment=&session=3&xstat=x&ystat=y&zstat=z' mytracing = json.load(urllib2.urlopen(\"url\")) # plot with matplotlib import matplotlib.pyplot as plt plt.plot(mytracing['x'],mytracing['y'])","title":"In pure Python"},{"location":"rest-api/#in-matlab","text":"url='http://localhost:5000/api/v1/getmaximage/public/rr30a/0/2' myimage = webread(url); imshow(myimage)","title":"In Matlab"},{"location":"rest-api/#in-igor","text":"print fetchurl(\"http://localhost:5000/api/v1/maplist/public\")","title":"In Igor"},{"location":"rest-api/#rest-api","text":"The following REST routes specify end-points that will return JSON text or images. We will be using the public user and the rr30a map included in the mmserver/data/ folder. The links on this page point to a development server that may or may not be running.","title":"REST API"},{"location":"rest-api/#get-help","text":"http://localhost:5000/help","title":"Get help"},{"location":"rest-api/#get-a-list-of-maps","text":"http://localhost:5000/api/v1/maplist/public","title":"Get a list of maps"},{"location":"rest-api/#load-a-map","text":"api/v1/loadmap/public/rr30a","title":"Load a map"},{"location":"rest-api/#get-annotation-values","text":"Here we will get an x-stat days , a y-stat pDist , and a z-stat z for map segment 0 across all sessions http://localhost:5000/v2/public/rr30a/getmapvalues?mapsegment=0&session=&xstat=days&ystat=pDist&zstat=z","title":"Get annotation values"},{"location":"rest-api/#get-a-tracing","text":"Here we will get the x/y/z of a tracing (in um) for all map segments in session 3 http://localhost:5000/v2/public/rr30a/getmaptracing?mapsegment=&session=3&xstat=x&ystat=y&zstat=z","title":"Get a tracing"},{"location":"rest-api/#get-an-image","text":"Here we will get the 20th image in the stack for timepoint 3, channel 2 http://localhost:5000/getimage/public/rr30a/3/2/20","title":"Get an image"},{"location":"rest-api/#get-a-maximal-intensity-projection","text":"Here we will get the maximal intensity projection of timepoint 0, channel 2 http://localhost:5000/getmaximage/public/rr30a/0/2 getimage :","title":"Get a maximal intensity projection"},{"location":"web-help/","text":"Plotting annotations Time-series and Load time-series. Select and then load a timeseries. Once a timeseries is loaded, all other plot interface elements will update the plot in real time. X and Y. Select X and Y values to plot. X time-point and Y time-point. Select X and Y timepoints to limit the plot to those timepoints. You must either select 'All' for both X and Y or select an individual timepoint for X and Y. Map segment. Select a segment to plot or select 'All' segment. Clicking on an annotation in the plot will highlight other corresponding annotations and propagate this selection to the images (see below). Browsing images Scroll Images. Mouse wheel. Pan. Click and drag. Zoom. Control + mouse wheel. Browsing corresponding annotation. Selecting an annotation with single-click will zoom into that annotation and snap all other images to the same annotation. As you hover the mouse, it is ready for selection when cursor turns from a hand (for dragging) to a finger-pointing (to select). Cog Icon. To control image options including hiding and showing the tracing and timepoint numbers and additional image controls for scrolling slices and panning. Link checkbox. links the images such that paging slices, panning, and zooming will affect all images. Really useful for browsing. Sliding Z. Make each image a small maximal z-projection to give a more volumetric view. Brightnesz slider. Make the images brighter and darker. Channel popup. Select the color channel to display. If no images appear, that channel is not available for the loaded map. Downloading time-series Time-series can be downloaded for further analysis and browsing in Map Manager Igor, Python, or Matlab. Two types of downloads are available. Just the annotations, ~1 MB per time-series, is sufficient for most further analysis, or the annotations and the images (big files).","title":"Web Help"},{"location":"web-help/#plotting-annotations","text":"Time-series and Load time-series. Select and then load a timeseries. Once a timeseries is loaded, all other plot interface elements will update the plot in real time. X and Y. Select X and Y values to plot. X time-point and Y time-point. Select X and Y timepoints to limit the plot to those timepoints. You must either select 'All' for both X and Y or select an individual timepoint for X and Y. Map segment. Select a segment to plot or select 'All' segment. Clicking on an annotation in the plot will highlight other corresponding annotations and propagate this selection to the images (see below).","title":"Plotting annotations"},{"location":"web-help/#browsing-images","text":"Scroll Images. Mouse wheel. Pan. Click and drag. Zoom. Control + mouse wheel. Browsing corresponding annotation. Selecting an annotation with single-click will zoom into that annotation and snap all other images to the same annotation. As you hover the mouse, it is ready for selection when cursor turns from a hand (for dragging) to a finger-pointing (to select). Cog Icon. To control image options including hiding and showing the tracing and timepoint numbers and additional image controls for scrolling slices and panning. Link checkbox. links the images such that paging slices, panning, and zooming will affect all images. Really useful for browsing. Sliding Z. Make each image a small maximal z-projection to give a more volumetric view. Brightnesz slider. Make the images brighter and darker. Channel popup. Select the color channel to display. If no images appear, that channel is not available for the loaded map.","title":"Browsing images"},{"location":"web-help/#downloading-time-series","text":"Time-series can be downloaded for further analysis and browsing in Map Manager Igor, Python, or Matlab. Two types of downloads are available. Just the annotations, ~1 MB per time-series, is sufficient for most further analysis, or the annotations and the images (big files).","title":"Downloading time-series"},{"location":"examples/a-plotting-annotations/","text":"Map plotting examples We will load an example map, get annotation values as 2D NumPy arrays, and plot the values using MatplotLib. The plotting can just as easily be done with any Python library such as Plotly or Pandas. Import the packages we will use import numpy as np import matplotlib.pyplot as plt import matplotlib as mpl from pymapmanager import mmMap from pymapmanager.mmUtil import newplotdict # check the version of pymapmanager import pymapmanager print('pymapmanager version is', pymapmanager.__version__) # set some matplotlib defaults so our plots look better fontsize = 16 mpl.rcParams['xtick.labelsize'] = fontsize mpl.rcParams['ytick.labelsize'] = fontsize pymapmanager version is 0.0.5 Load a map filePath = 'exampleMaps/rr30a/rr30a.txt' m = mmMap(filePath=filePath) map rr30a loaded in 0.42 seconds. Plot the position of each spine along its segment tracing # getMapValues2(self, stat, roiType='spineROI', segmentID=[], plotBad=False) print('Number of map segments:', m.numMapSegments) segmentID = 3 # None to plot all segment, [1,3,5] to plot segment 1, 3, and 5 # m.getMapValues2() returns a 2D numpy ndarray # rows are object runs, columns are sessions, each [i][j] is value for 'stat' x = m.getMapValues2('mapSession', segmentID=segmentID) y = m.getMapValues2('pDist', segmentID=segmentID) # plot with matplotlib plt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray') plt.plot(x, y, 'ok') plt.xlabel('Session Index', fontsize=16) plt.ylabel('Dendrite Position (um)', fontsize=16) plt.show() Number of map segments: 5 mmMap.getMapValues3() took 0.04 seconds mmMap.getMapValues3() took 0.02 seconds Plot the 'background subtracted spine sum' from image channel two. segmentID = None # All segments x = m.getMapValues2('days', segmentID=segmentID) y = m.getMapValues2('ubssSum_int2', segmentID=segmentID) # plot with matplotlib plt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray') plt.plot(x, y, 'ok') plt.xlabel('Days', fontsize=16) plt.ylabel('Background Subtracted\\nSpine Sum\\n(Channel 2)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.02 seconds Normalize to session 1 and replot. mmMap.getMapValues returns 2D numpy arrays where earch row is a run of objects and columns are sessions. We can normalize each annotation at [i][j] to itself at session 1 with [i][session] segmentID = None # All segments x = m.getMapValues2('days', segmentID=segmentID) y = m.getMapValues2('ubssSum_int2', segmentID=segmentID) sessionOne = y[:,[1]] yPercent = y / sessionOne * 100 # plot with matplotlib plt.plot(x.T, yPercent.T, '-k', linewidth=1.0, color='gray') plt.plot(x, yPercent, 'ok') plt.xlabel('Days', fontsize=16) plt.ylabel('Percent Change In\\nBackground Subtracted Spine Sum\\n(Channel 2)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds Compare a stat on two different sessions Here we compare the values at session 4 with the values at session 2. session4 = y[:,[4]] # pull annotations from sessions 4 session2 = y[:,[2]] # pull annotaitons from session 2 # plot with matplotlib plt.plot(session2, session4, 'ok') plt.xlabel('Session 2', fontsize=16) plt.ylabel('Session 4', fontsize=16) plt.show() Normalize one session against another And then normalize the values at session 4 with the values at session 2. session4 = y[:,[4]] session2 = y[:,[2]] session4Norm = session4 / session2 * 100 # plot with matplotlib plt.plot(session2, session4Norm, 'ok') plt.xlabel('Session 2', fontsize=16) plt.ylabel('Session 4 (% change from session 2)', fontsize=16) plt.show() Plot length of added spines normalized to the 'birth day'. The color in the plot corresponds to the intensity of a spine as a function of its 'birth' day, e.g. the day it was added.. Here we will use mmMap.getMapValues3() which takes a plot struct. Making it easier to specify paremeters to the plot. This example is plotting session, it would make more sense to plot 'days'. plotDict = newplotdict() plotDict['plotbad'] = True plotDict['xstat'] = 'days' plotDict['ystat'] = 'pDist' plotDict['zstat'] = 'ubssSum_int2' #'sLen3d_int1' #swap in any stat you like, e.g. 'ubssSum_int2' plotDict['segmentid'] = [0] plotDict = m.getMapValues3(plotDict) plotDict2 = dict(plotDict) plotDict2['xstat'] = 'isAdd' plotDict2['ystat'] = 'isSub' plotDict2['zstat'] = 'isTransient' plotDict2 = m.getMapValues3(plotDict2) #only plot added spines x = m.getMapValues2('days', segmentID=plotDict['segmentid']) # get an array of values new_z2 = [] for i, row in enumerate(plotDict['z']): #if np.count_nonzero(~np.isnan(row)) > 0: for j, val in enumerate(row): if plotDict2['x'][i,j] == 1: # gives us the session a spine was added #row = row / row[j] * 100 # z-color as '% change' from session spine was added row = row - row[j] # z-color as 'absolute change' from session spine was added new_z2.append(row) break plt.imshow(new_z2, aspect='auto') plt.xlabel('Sessions a spine was added', fontsize=16) plt.ylabel('Spine Index (au)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds Homework Plot ubssSum_int2 vs pDist, sort along pDist, calculate auto-correlation function at lag 1. Peaks in auto-correlation indicate 'hot spots' along dendritic segment. Do this for all segments in a map. Plot a heat map of spine run vs session where color is ubssSum_ch2 plot ubssSum as a function of a spines age. X-axis should be days where day 0 is appearance of new spine. This plot will only have added spines Do the same for spine 'death' where x-axis counts down to day 0 when a spine is subtracted","title":"a-plotting-annotations"},{"location":"examples/a-plotting-annotations/#map-plotting-examples","text":"We will load an example map, get annotation values as 2D NumPy arrays, and plot the values using MatplotLib. The plotting can just as easily be done with any Python library such as Plotly or Pandas.","title":"Map plotting examples"},{"location":"examples/a-plotting-annotations/#import-the-packages-we-will-use","text":"import numpy as np import matplotlib.pyplot as plt import matplotlib as mpl from pymapmanager import mmMap from pymapmanager.mmUtil import newplotdict # check the version of pymapmanager import pymapmanager print('pymapmanager version is', pymapmanager.__version__) # set some matplotlib defaults so our plots look better fontsize = 16 mpl.rcParams['xtick.labelsize'] = fontsize mpl.rcParams['ytick.labelsize'] = fontsize pymapmanager version is 0.0.5","title":"Import the packages we will use"},{"location":"examples/a-plotting-annotations/#load-a-map","text":"filePath = 'exampleMaps/rr30a/rr30a.txt' m = mmMap(filePath=filePath) map rr30a loaded in 0.42 seconds.","title":"Load a map"},{"location":"examples/a-plotting-annotations/#plot-the-position-of-each-spine-along-its-segment-tracing","text":"# getMapValues2(self, stat, roiType='spineROI', segmentID=[], plotBad=False) print('Number of map segments:', m.numMapSegments) segmentID = 3 # None to plot all segment, [1,3,5] to plot segment 1, 3, and 5 # m.getMapValues2() returns a 2D numpy ndarray # rows are object runs, columns are sessions, each [i][j] is value for 'stat' x = m.getMapValues2('mapSession', segmentID=segmentID) y = m.getMapValues2('pDist', segmentID=segmentID) # plot with matplotlib plt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray') plt.plot(x, y, 'ok') plt.xlabel('Session Index', fontsize=16) plt.ylabel('Dendrite Position (um)', fontsize=16) plt.show() Number of map segments: 5 mmMap.getMapValues3() took 0.04 seconds mmMap.getMapValues3() took 0.02 seconds","title":"Plot the position of each spine along its segment tracing"},{"location":"examples/a-plotting-annotations/#plot-the-background-subtracted-spine-sum-from-image-channel-two","text":"segmentID = None # All segments x = m.getMapValues2('days', segmentID=segmentID) y = m.getMapValues2('ubssSum_int2', segmentID=segmentID) # plot with matplotlib plt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray') plt.plot(x, y, 'ok') plt.xlabel('Days', fontsize=16) plt.ylabel('Background Subtracted\\nSpine Sum\\n(Channel 2)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.02 seconds","title":"Plot the 'background subtracted spine sum' from image channel two."},{"location":"examples/a-plotting-annotations/#normalize-to-session-1-and-replot","text":"mmMap.getMapValues returns 2D numpy arrays where earch row is a run of objects and columns are sessions. We can normalize each annotation at [i][j] to itself at session 1 with [i][session] segmentID = None # All segments x = m.getMapValues2('days', segmentID=segmentID) y = m.getMapValues2('ubssSum_int2', segmentID=segmentID) sessionOne = y[:,[1]] yPercent = y / sessionOne * 100 # plot with matplotlib plt.plot(x.T, yPercent.T, '-k', linewidth=1.0, color='gray') plt.plot(x, yPercent, 'ok') plt.xlabel('Days', fontsize=16) plt.ylabel('Percent Change In\\nBackground Subtracted Spine Sum\\n(Channel 2)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds","title":"Normalize to session 1 and replot."},{"location":"examples/a-plotting-annotations/#compare-a-stat-on-two-different-sessions","text":"Here we compare the values at session 4 with the values at session 2. session4 = y[:,[4]] # pull annotations from sessions 4 session2 = y[:,[2]] # pull annotaitons from session 2 # plot with matplotlib plt.plot(session2, session4, 'ok') plt.xlabel('Session 2', fontsize=16) plt.ylabel('Session 4', fontsize=16) plt.show()","title":"Compare a stat on two different sessions"},{"location":"examples/a-plotting-annotations/#normalize-one-session-against-another","text":"And then normalize the values at session 4 with the values at session 2. session4 = y[:,[4]] session2 = y[:,[2]] session4Norm = session4 / session2 * 100 # plot with matplotlib plt.plot(session2, session4Norm, 'ok') plt.xlabel('Session 2', fontsize=16) plt.ylabel('Session 4 (% change from session 2)', fontsize=16) plt.show()","title":"Normalize one session against another"},{"location":"examples/a-plotting-annotations/#plot-length-of-added-spines-normalized-to-the-birth-day","text":"The color in the plot corresponds to the intensity of a spine as a function of its 'birth' day, e.g. the day it was added.. Here we will use mmMap.getMapValues3() which takes a plot struct. Making it easier to specify paremeters to the plot. This example is plotting session, it would make more sense to plot 'days'. plotDict = newplotdict() plotDict['plotbad'] = True plotDict['xstat'] = 'days' plotDict['ystat'] = 'pDist' plotDict['zstat'] = 'ubssSum_int2' #'sLen3d_int1' #swap in any stat you like, e.g. 'ubssSum_int2' plotDict['segmentid'] = [0] plotDict = m.getMapValues3(plotDict) plotDict2 = dict(plotDict) plotDict2['xstat'] = 'isAdd' plotDict2['ystat'] = 'isSub' plotDict2['zstat'] = 'isTransient' plotDict2 = m.getMapValues3(plotDict2) #only plot added spines x = m.getMapValues2('days', segmentID=plotDict['segmentid']) # get an array of values new_z2 = [] for i, row in enumerate(plotDict['z']): #if np.count_nonzero(~np.isnan(row)) > 0: for j, val in enumerate(row): if plotDict2['x'][i,j] == 1: # gives us the session a spine was added #row = row / row[j] * 100 # z-color as '% change' from session spine was added row = row - row[j] # z-color as 'absolute change' from session spine was added new_z2.append(row) break plt.imshow(new_z2, aspect='auto') plt.xlabel('Sessions a spine was added', fontsize=16) plt.ylabel('Spine Index (au)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds","title":"Plot length of added spines normalized to the 'birth day'."},{"location":"examples/a-plotting-annotations/#homework","text":"Plot ubssSum_int2 vs pDist, sort along pDist, calculate auto-correlation function at lag 1. Peaks in auto-correlation indicate 'hot spots' along dendritic segment. Do this for all segments in a map. Plot a heat map of spine run vs session where color is ubssSum_ch2 plot ubssSum as a function of a spines age. X-axis should be days where day 0 is appearance of new spine. This plot will only have added spines Do the same for spine 'death' where x-axis counts down to day 0 when a spine is subtracted","title":"Homework"},{"location":"examples/a/a-plotting-annotations/","text":"Map plotting examples We will load an example map, get annotation values as 2D NumPy arrays, and plot the values using MatplotLib. The plotting can just as easily be done with any Python library such as Plotly or Pandas. Import the packages we will use import numpy as np import matplotlib.pyplot as plt import matplotlib as mpl from pymapmanager import mmMap from pymapmanager.mmUtil import newplotdict # check the version of pymapmanager import pymapmanager print('pymapmanager version is', pymapmanager.__version__) # set some matplotlib defaults so our plots look better fontsize = 16 mpl.rcParams['xtick.labelsize'] = fontsize mpl.rcParams['ytick.labelsize'] = fontsize pymapmanager version is 0.0.5 Load a map filePath = 'exampleMaps/rr30a/rr30a.txt' m = mmMap(filePath=filePath) map rr30a loaded in 0.42 seconds. Plot the position of each spine along its segment tracing # getMapValues2(self, stat, roiType='spineROI', segmentID=[], plotBad=False) print('Number of map segments:', m.numMapSegments) segmentID = 3 # None to plot all segment, [1,3,5] to plot segment 1, 3, and 5 # m.getMapValues2() returns a 2D numpy ndarray # rows are object runs, columns are sessions, each [i][j] is value for 'stat' x = m.getMapValues2('mapSession', segmentID=segmentID) y = m.getMapValues2('pDist', segmentID=segmentID) # plot with matplotlib plt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray') plt.plot(x, y, 'ok') plt.xlabel('Session Index', fontsize=16) plt.ylabel('Dendrite Position (um)', fontsize=16) plt.show() Number of map segments: 5 mmMap.getMapValues3() took 0.04 seconds mmMap.getMapValues3() took 0.02 seconds Plot the 'background subtracted spine sum' from image channel two. segmentID = None # All segments x = m.getMapValues2('days', segmentID=segmentID) y = m.getMapValues2('ubssSum_int2', segmentID=segmentID) # plot with matplotlib plt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray') plt.plot(x, y, 'ok') plt.xlabel('Days', fontsize=16) plt.ylabel('Background Subtracted\\nSpine Sum\\n(Channel 2)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.02 seconds Normalize to session 1 and replot. mmMap.getMapValues returns 2D numpy arrays where earch row is a run of objects and columns are sessions. We can normalize each annotation at [i][j] to itself at session 1 with [i][session] segmentID = None # All segments x = m.getMapValues2('days', segmentID=segmentID) y = m.getMapValues2('ubssSum_int2', segmentID=segmentID) sessionOne = y[:,[1]] yPercent = y / sessionOne * 100 # plot with matplotlib plt.plot(x.T, yPercent.T, '-k', linewidth=1.0, color='gray') plt.plot(x, yPercent, 'ok') plt.xlabel('Days', fontsize=16) plt.ylabel('Percent Change In\\nBackground Subtracted Spine Sum\\n(Channel 2)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds Compare a stat on two different sessions Here we compare the values at session 4 with the values at session 2. session4 = y[:,[4]] # pull annotations from sessions 4 session2 = y[:,[2]] # pull annotaitons from session 2 # plot with matplotlib plt.plot(session2, session4, 'ok') plt.xlabel('Session 2', fontsize=16) plt.ylabel('Session 4', fontsize=16) plt.show() Normalize one session against another And then normalize the values at session 4 with the values at session 2. session4 = y[:,[4]] session2 = y[:,[2]] session4Norm = session4 / session2 * 100 # plot with matplotlib plt.plot(session2, session4Norm, 'ok') plt.xlabel('Session 2', fontsize=16) plt.ylabel('Session 4 (% change from session 2)', fontsize=16) plt.show() Plot length of added spines normalized to the 'birth day'. The color in the plot corresponds to the intensity of a spine as a function of its 'birth' day, e.g. the day it was added.. Here we will use mmMap.getMapValues3() which takes a plot struct. Making it easier to specify paremeters to the plot. This example is plotting session, it would make more sense to plot 'days'. plotDict = newplotdict() plotDict['plotbad'] = True plotDict['xstat'] = 'days' plotDict['ystat'] = 'pDist' plotDict['zstat'] = 'ubssSum_int2' #'sLen3d_int1' #swap in any stat you like, e.g. 'ubssSum_int2' plotDict['segmentid'] = [0] plotDict = m.getMapValues3(plotDict) plotDict2 = dict(plotDict) plotDict2['xstat'] = 'isAdd' plotDict2['ystat'] = 'isSub' plotDict2['zstat'] = 'isTransient' plotDict2 = m.getMapValues3(plotDict2) #only plot added spines x = m.getMapValues2('days', segmentID=plotDict['segmentid']) # get an array of values new_z2 = [] for i, row in enumerate(plotDict['z']): #if np.count_nonzero(~np.isnan(row)) > 0: for j, val in enumerate(row): if plotDict2['x'][i,j] == 1: # gives us the session a spine was added #row = row / row[j] * 100 # z-color as '% change' from session spine was added row = row - row[j] # z-color as 'absolute change' from session spine was added new_z2.append(row) break plt.imshow(new_z2, aspect='auto') plt.xlabel('Sessions a spine was added', fontsize=16) plt.ylabel('Spine Index (au)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds Homework Plot ubssSum_int2 vs pDist, sort along pDist, calculate auto-correlation function at lag 1. Peaks in auto-correlation indicate 'hot spots' along dendritic segment. Do this for all segments in a map. Plot a heat map of spine run vs session where color is ubssSum_ch2 plot ubssSum as a function of a spines age. X-axis should be days where day 0 is appearance of new spine. This plot will only have added spines Do the same for spine 'death' where x-axis counts down to day 0 when a spine is subtracted","title":"A plotting annotations"},{"location":"examples/a/a-plotting-annotations/#map-plotting-examples","text":"We will load an example map, get annotation values as 2D NumPy arrays, and plot the values using MatplotLib. The plotting can just as easily be done with any Python library such as Plotly or Pandas.","title":"Map plotting examples"},{"location":"examples/a/a-plotting-annotations/#import-the-packages-we-will-use","text":"import numpy as np import matplotlib.pyplot as plt import matplotlib as mpl from pymapmanager import mmMap from pymapmanager.mmUtil import newplotdict # check the version of pymapmanager import pymapmanager print('pymapmanager version is', pymapmanager.__version__) # set some matplotlib defaults so our plots look better fontsize = 16 mpl.rcParams['xtick.labelsize'] = fontsize mpl.rcParams['ytick.labelsize'] = fontsize pymapmanager version is 0.0.5","title":"Import the packages we will use"},{"location":"examples/a/a-plotting-annotations/#load-a-map","text":"filePath = 'exampleMaps/rr30a/rr30a.txt' m = mmMap(filePath=filePath) map rr30a loaded in 0.42 seconds.","title":"Load a map"},{"location":"examples/a/a-plotting-annotations/#plot-the-position-of-each-spine-along-its-segment-tracing","text":"# getMapValues2(self, stat, roiType='spineROI', segmentID=[], plotBad=False) print('Number of map segments:', m.numMapSegments) segmentID = 3 # None to plot all segment, [1,3,5] to plot segment 1, 3, and 5 # m.getMapValues2() returns a 2D numpy ndarray # rows are object runs, columns are sessions, each [i][j] is value for 'stat' x = m.getMapValues2('mapSession', segmentID=segmentID) y = m.getMapValues2('pDist', segmentID=segmentID) # plot with matplotlib plt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray') plt.plot(x, y, 'ok') plt.xlabel('Session Index', fontsize=16) plt.ylabel('Dendrite Position (um)', fontsize=16) plt.show() Number of map segments: 5 mmMap.getMapValues3() took 0.04 seconds mmMap.getMapValues3() took 0.02 seconds","title":"Plot the position of each spine along its segment tracing"},{"location":"examples/a/a-plotting-annotations/#plot-the-background-subtracted-spine-sum-from-image-channel-two","text":"segmentID = None # All segments x = m.getMapValues2('days', segmentID=segmentID) y = m.getMapValues2('ubssSum_int2', segmentID=segmentID) # plot with matplotlib plt.plot(x.transpose(), y.transpose(), '-k', linewidth=1.0, color='gray') plt.plot(x, y, 'ok') plt.xlabel('Days', fontsize=16) plt.ylabel('Background Subtracted\\nSpine Sum\\n(Channel 2)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.02 seconds","title":"Plot the 'background subtracted spine sum' from image channel two."},{"location":"examples/a/a-plotting-annotations/#normalize-to-session-1-and-replot","text":"mmMap.getMapValues returns 2D numpy arrays where earch row is a run of objects and columns are sessions. We can normalize each annotation at [i][j] to itself at session 1 with [i][session] segmentID = None # All segments x = m.getMapValues2('days', segmentID=segmentID) y = m.getMapValues2('ubssSum_int2', segmentID=segmentID) sessionOne = y[:,[1]] yPercent = y / sessionOne * 100 # plot with matplotlib plt.plot(x.T, yPercent.T, '-k', linewidth=1.0, color='gray') plt.plot(x, yPercent, 'ok') plt.xlabel('Days', fontsize=16) plt.ylabel('Percent Change In\\nBackground Subtracted Spine Sum\\n(Channel 2)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds","title":"Normalize to session 1 and replot."},{"location":"examples/a/a-plotting-annotations/#compare-a-stat-on-two-different-sessions","text":"Here we compare the values at session 4 with the values at session 2. session4 = y[:,[4]] # pull annotations from sessions 4 session2 = y[:,[2]] # pull annotaitons from session 2 # plot with matplotlib plt.plot(session2, session4, 'ok') plt.xlabel('Session 2', fontsize=16) plt.ylabel('Session 4', fontsize=16) plt.show()","title":"Compare a stat on two different sessions"},{"location":"examples/a/a-plotting-annotations/#normalize-one-session-against-another","text":"And then normalize the values at session 4 with the values at session 2. session4 = y[:,[4]] session2 = y[:,[2]] session4Norm = session4 / session2 * 100 # plot with matplotlib plt.plot(session2, session4Norm, 'ok') plt.xlabel('Session 2', fontsize=16) plt.ylabel('Session 4 (% change from session 2)', fontsize=16) plt.show()","title":"Normalize one session against another"},{"location":"examples/a/a-plotting-annotations/#plot-length-of-added-spines-normalized-to-the-birth-day","text":"The color in the plot corresponds to the intensity of a spine as a function of its 'birth' day, e.g. the day it was added.. Here we will use mmMap.getMapValues3() which takes a plot struct. Making it easier to specify paremeters to the plot. This example is plotting session, it would make more sense to plot 'days'. plotDict = newplotdict() plotDict['plotbad'] = True plotDict['xstat'] = 'days' plotDict['ystat'] = 'pDist' plotDict['zstat'] = 'ubssSum_int2' #'sLen3d_int1' #swap in any stat you like, e.g. 'ubssSum_int2' plotDict['segmentid'] = [0] plotDict = m.getMapValues3(plotDict) plotDict2 = dict(plotDict) plotDict2['xstat'] = 'isAdd' plotDict2['ystat'] = 'isSub' plotDict2['zstat'] = 'isTransient' plotDict2 = m.getMapValues3(plotDict2) #only plot added spines x = m.getMapValues2('days', segmentID=plotDict['segmentid']) # get an array of values new_z2 = [] for i, row in enumerate(plotDict['z']): #if np.count_nonzero(~np.isnan(row)) > 0: for j, val in enumerate(row): if plotDict2['x'][i,j] == 1: # gives us the session a spine was added #row = row / row[j] * 100 # z-color as '% change' from session spine was added row = row - row[j] # z-color as 'absolute change' from session spine was added new_z2.append(row) break plt.imshow(new_z2, aspect='auto') plt.xlabel('Sessions a spine was added', fontsize=16) plt.ylabel('Spine Index (au)', fontsize=16) plt.show() mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds mmMap.getMapValues3() took 0.03 seconds","title":"Plot length of added spines normalized to the 'birth day'."},{"location":"examples/a/a-plotting-annotations/#homework","text":"Plot ubssSum_int2 vs pDist, sort along pDist, calculate auto-correlation function at lag 1. Peaks in auto-correlation indicate 'hot spots' along dendritic segment. Do this for all segments in a map. Plot a heat map of spine run vs session where color is ubssSum_ch2 plot ubssSum as a function of a spines age. X-axis should be days where day 0 is appearance of new spine. This plot will only have added spines Do the same for spine 'death' where x-axis counts down to day 0 when a spine is subtracted","title":"Homework"}]}